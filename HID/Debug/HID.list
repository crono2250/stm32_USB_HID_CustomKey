
HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003170  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800327c  0800327c  0001327c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003318  08003318  00013318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800331c  0800331c  0001331c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000100  20000000  08003320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000958  20000100  08003420  00020100  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000a58  08003420  00020a58  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001ec81  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000042af  00000000  00000000  0003edaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009edd  00000000  00000000  00043059  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000db8  00000000  00000000  0004cf38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000011f8  00000000  00000000  0004dcf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007eb0  00000000  00000000  0004eee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004922  00000000  00000000  00056d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005b6ba  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002608  00000000  00000000  0005b738  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000100 	.word	0x20000100
 8000128:	00000000 	.word	0x00000000
 800012c:	08003264 	.word	0x08003264

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000104 	.word	0x20000104
 8000148:	08003264 	.word	0x08003264

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f89e 	bl	80002a4 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	200000c8 	.word	0x200000c8
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f002 fcac 	bl	8002b08 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000148 	.word	0x20000148
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000148 	.word	0x20000148

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfaf      	iteee	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
 800026e:	f000 000f 	andlt.w	r0, r0, #15
 8000272:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfa5      	ittet	ge
 8000276:	b2d2      	uxtbge	r2, r2
 8000278:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800028c:	2301      	movs	r3, #1
 800028e:	0942      	lsrs	r2, r0, #5
 8000290:	f000 001f 	and.w	r0, r0, #31
 8000294:	fa03 f000 	lsl.w	r0, r3, r0
 8000298:	4b01      	ldr	r3, [pc, #4]	; (80002a0 <HAL_NVIC_EnableIRQ+0x14>)
 800029a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800029e:	4770      	bx	lr
 80002a0:	e000e100 	.word	0xe000e100

080002a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002a4:	3801      	subs	r0, #1
 80002a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002aa:	d20a      	bcs.n	80002c2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b0:	4a06      	ldr	r2, [pc, #24]	; (80002cc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ba:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002bc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002c2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000e010 	.word	0xe000e010
 80002cc:	e000ed00 	.word	0xe000ed00

080002d0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002d0:	4b04      	ldr	r3, [pc, #16]	; (80002e4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002d2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	bf0c      	ite	eq
 80002d8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002dc:	f022 0204 	bicne.w	r2, r2, #4
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	4770      	bx	lr
 80002e4:	e000e010 	.word	0xe000e010

080002e8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002e8:	4770      	bx	lr

080002ea <HAL_SYSTICK_IRQHandler>:
{
 80002ea:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002ec:	f7ff fffc 	bl	80002e8 <HAL_SYSTICK_Callback>
 80002f0:	bd08      	pop	{r3, pc}
	...

080002f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002f8:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002fa:	4616      	mov	r6, r2
 80002fc:	4b65      	ldr	r3, [pc, #404]	; (8000494 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002fe:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80004a4 <HAL_GPIO_Init+0x1b0>
 8000302:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80004a8 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000306:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800030a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800030c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000310:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000314:	45a0      	cmp	r8, r4
 8000316:	d17f      	bne.n	8000418 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000318:	684d      	ldr	r5, [r1, #4]
 800031a:	2d12      	cmp	r5, #18
 800031c:	f000 80af 	beq.w	800047e <HAL_GPIO_Init+0x18a>
 8000320:	f200 8088 	bhi.w	8000434 <HAL_GPIO_Init+0x140>
 8000324:	2d02      	cmp	r5, #2
 8000326:	f000 80a7 	beq.w	8000478 <HAL_GPIO_Init+0x184>
 800032a:	d87c      	bhi.n	8000426 <HAL_GPIO_Init+0x132>
 800032c:	2d00      	cmp	r5, #0
 800032e:	f000 808e 	beq.w	800044e <HAL_GPIO_Init+0x15a>
 8000332:	2d01      	cmp	r5, #1
 8000334:	f000 809e 	beq.w	8000474 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000338:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800033c:	2cff      	cmp	r4, #255	; 0xff
 800033e:	bf93      	iteet	ls
 8000340:	4682      	movls	sl, r0
 8000342:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000346:	3d08      	subhi	r5, #8
 8000348:	f8d0 b000 	ldrls.w	fp, [r0]
 800034c:	bf92      	itee	ls
 800034e:	00b5      	lslls	r5, r6, #2
 8000350:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000354:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000356:	fa09 f805 	lsl.w	r8, r9, r5
 800035a:	ea2b 0808 	bic.w	r8, fp, r8
 800035e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000362:	bf88      	it	hi
 8000364:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000368:	ea48 0505 	orr.w	r5, r8, r5
 800036c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000370:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000374:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000378:	d04e      	beq.n	8000418 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800037a:	4d47      	ldr	r5, [pc, #284]	; (8000498 <HAL_GPIO_Init+0x1a4>)
 800037c:	4f46      	ldr	r7, [pc, #280]	; (8000498 <HAL_GPIO_Init+0x1a4>)
 800037e:	69ad      	ldr	r5, [r5, #24]
 8000380:	f026 0803 	bic.w	r8, r6, #3
 8000384:	f045 0501 	orr.w	r5, r5, #1
 8000388:	61bd      	str	r5, [r7, #24]
 800038a:	69bd      	ldr	r5, [r7, #24]
 800038c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000390:	f005 0501 	and.w	r5, r5, #1
 8000394:	9501      	str	r5, [sp, #4]
 8000396:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800039a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800039e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003a0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80003a4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003a8:	fa09 f90b 	lsl.w	r9, r9, fp
 80003ac:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003b0:	4d3a      	ldr	r5, [pc, #232]	; (800049c <HAL_GPIO_Init+0x1a8>)
 80003b2:	42a8      	cmp	r0, r5
 80003b4:	d068      	beq.n	8000488 <HAL_GPIO_Init+0x194>
 80003b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ba:	42a8      	cmp	r0, r5
 80003bc:	d066      	beq.n	800048c <HAL_GPIO_Init+0x198>
 80003be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003c2:	42a8      	cmp	r0, r5
 80003c4:	d064      	beq.n	8000490 <HAL_GPIO_Init+0x19c>
 80003c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ca:	42a8      	cmp	r0, r5
 80003cc:	bf0c      	ite	eq
 80003ce:	2503      	moveq	r5, #3
 80003d0:	2504      	movne	r5, #4
 80003d2:	fa05 f50b 	lsl.w	r5, r5, fp
 80003d6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003da:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003de:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003e0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003e4:	bf14      	ite	ne
 80003e6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003e8:	43a5      	biceq	r5, r4
 80003ea:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003ec:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003ee:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003f2:	bf14      	ite	ne
 80003f4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003f6:	43a5      	biceq	r5, r4
 80003f8:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003fa:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003fc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000400:	bf14      	ite	ne
 8000402:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000404:	43a5      	biceq	r5, r4
 8000406:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000408:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800040a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800040e:	bf14      	ite	ne
 8000410:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000412:	ea25 0404 	biceq.w	r4, r5, r4
 8000416:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000418:	3601      	adds	r6, #1
 800041a:	2e10      	cmp	r6, #16
 800041c:	f47f af73 	bne.w	8000306 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000420:	b003      	add	sp, #12
 8000422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000426:	2d03      	cmp	r5, #3
 8000428:	d022      	beq.n	8000470 <HAL_GPIO_Init+0x17c>
 800042a:	2d11      	cmp	r5, #17
 800042c:	d184      	bne.n	8000338 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800042e:	68ca      	ldr	r2, [r1, #12]
 8000430:	3204      	adds	r2, #4
          break;
 8000432:	e781      	b.n	8000338 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000434:	4f1a      	ldr	r7, [pc, #104]	; (80004a0 <HAL_GPIO_Init+0x1ac>)
 8000436:	42bd      	cmp	r5, r7
 8000438:	d009      	beq.n	800044e <HAL_GPIO_Init+0x15a>
 800043a:	d812      	bhi.n	8000462 <HAL_GPIO_Init+0x16e>
 800043c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80004ac <HAL_GPIO_Init+0x1b8>
 8000440:	454d      	cmp	r5, r9
 8000442:	d004      	beq.n	800044e <HAL_GPIO_Init+0x15a>
 8000444:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000448:	454d      	cmp	r5, r9
 800044a:	f47f af75 	bne.w	8000338 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800044e:	688a      	ldr	r2, [r1, #8]
 8000450:	b1c2      	cbz	r2, 8000484 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000452:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000454:	bf0c      	ite	eq
 8000456:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800045a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800045e:	2208      	movs	r2, #8
 8000460:	e76a      	b.n	8000338 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000462:	4575      	cmp	r5, lr
 8000464:	d0f3      	beq.n	800044e <HAL_GPIO_Init+0x15a>
 8000466:	4565      	cmp	r5, ip
 8000468:	d0f1      	beq.n	800044e <HAL_GPIO_Init+0x15a>
 800046a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80004b0 <HAL_GPIO_Init+0x1bc>
 800046e:	e7eb      	b.n	8000448 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000470:	2200      	movs	r2, #0
 8000472:	e761      	b.n	8000338 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000474:	68ca      	ldr	r2, [r1, #12]
          break;
 8000476:	e75f      	b.n	8000338 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000478:	68ca      	ldr	r2, [r1, #12]
 800047a:	3208      	adds	r2, #8
          break;
 800047c:	e75c      	b.n	8000338 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800047e:	68ca      	ldr	r2, [r1, #12]
 8000480:	320c      	adds	r2, #12
          break;
 8000482:	e759      	b.n	8000338 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000484:	2204      	movs	r2, #4
 8000486:	e757      	b.n	8000338 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000488:	2500      	movs	r5, #0
 800048a:	e7a2      	b.n	80003d2 <HAL_GPIO_Init+0xde>
 800048c:	2501      	movs	r5, #1
 800048e:	e7a0      	b.n	80003d2 <HAL_GPIO_Init+0xde>
 8000490:	2502      	movs	r5, #2
 8000492:	e79e      	b.n	80003d2 <HAL_GPIO_Init+0xde>
 8000494:	40010400 	.word	0x40010400
 8000498:	40021000 	.word	0x40021000
 800049c:	40010800 	.word	0x40010800
 80004a0:	10210000 	.word	0x10210000
 80004a4:	10310000 	.word	0x10310000
 80004a8:	10320000 	.word	0x10320000
 80004ac:	10110000 	.word	0x10110000
 80004b0:	10220000 	.word	0x10220000

080004b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004b4:	b10a      	cbz	r2, 80004ba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80004b6:	6101      	str	r1, [r0, #16]
 80004b8:	4770      	bx	lr
 80004ba:	0409      	lsls	r1, r1, #16
 80004bc:	e7fb      	b.n	80004b6 <HAL_GPIO_WritePin+0x2>

080004be <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80004be:	68c3      	ldr	r3, [r0, #12]
 80004c0:	4059      	eors	r1, r3
 80004c2:	60c1      	str	r1, [r0, #12]
 80004c4:	4770      	bx	lr

080004c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80004c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80004ca:	4604      	mov	r4, r0
{
 80004cc:	b086      	sub	sp, #24
  if(hpcd == NULL)
 80004ce:	2800      	cmp	r0, #0
 80004d0:	d060      	beq.n	8000594 <HAL_PCD_Init+0xce>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80004d2:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 80004d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80004da:	b91b      	cbnz	r3, 80004e4 <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80004dc:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80004e0:	f002 fc06 	bl	8002cf0 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80004e4:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80004e6:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80004e8:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 80004ea:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80004ee:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 80004f2:	f001 fa15 	bl	8001920 <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80004f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80004fa:	682b      	ldr	r3, [r5, #0]
 80004fc:	f104 0804 	add.w	r8, r4, #4
 8000500:	6033      	str	r3, [r6, #0]
 8000502:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000506:	6820      	ldr	r0, [r4, #0]
 8000508:	f001 f9fa 	bl	8001900 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 800050c:	2100      	movs	r1, #0
 800050e:	6820      	ldr	r0, [r4, #0]
 8000510:	f001 fa10 	bl	8001934 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8000514:	2100      	movs	r1, #0
 8000516:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000518:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 800051a:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 800051c:	4608      	mov	r0, r1
 800051e:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 8000522:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000526:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000528:	3101      	adds	r1, #1
 800052a:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].is_in = 1U;
 800052c:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000530:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 8000534:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 8000536:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 8000538:	6410      	str	r0, [r2, #64]	; 0x40
 800053a:	f102 0220 	add.w	r2, r2, #32
  for (index = 0U; index < 15U ; index++)
 800053e:	d1f0      	bne.n	8000522 <HAL_PCD_Init+0x5c>
 8000540:	2200      	movs	r2, #0
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8000542:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8000544:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000548:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 800054a:	3201      	adds	r2, #1
 800054c:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0U;
 800054e:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000552:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 8000556:	f8c3 7238 	str.w	r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 800055a:	f8c3 723c 	str.w	r7, [r3, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 800055e:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 8000562:	f103 0320 	add.w	r3, r3, #32
  for (index = 0U; index < 15U ; index++)
 8000566:	d1ed      	bne.n	8000544 <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8000568:	466e      	mov	r6, sp
 800056a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800056e:	682b      	ldr	r3, [r5, #0]
 8000570:	6033      	str	r3, [r6, #0]
 8000572:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000576:	6820      	ldr	r0, [r4, #0]
 8000578:	f001 f9de 	bl	8001938 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 800057c:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800057e:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 8000582:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 8000584:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 8000588:	f001 fcae 	bl	8001ee8 <USB_DevDisconnect>
  return HAL_OK;
 800058c:	2000      	movs	r0, #0
}
 800058e:	b006      	add	sp, #24
 8000590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000594:	2001      	movs	r0, #1
 8000596:	e7fa      	b.n	800058e <HAL_PCD_Init+0xc8>

08000598 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000598:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 800059c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800059e:	2b01      	cmp	r3, #1
{
 80005a0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80005a2:	d00e      	beq.n	80005c2 <HAL_PCD_Start+0x2a>
 80005a4:	2101      	movs	r1, #1
 80005a6:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 80005aa:	f002 fcb8 	bl	8002f1e <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 80005ae:	6820      	ldr	r0, [r4, #0]
 80005b0:	f001 fc98 	bl	8001ee4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80005b4:	6820      	ldr	r0, [r4, #0]
 80005b6:	f001 f9aa 	bl	800190e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80005c0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80005c2:	2002      	movs	r0, #2
}
 80005c4:	bd10      	pop	{r4, pc}

080005c6 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80005c6:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 80005ca:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80005cc:	2a01      	cmp	r2, #1
{
 80005ce:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80005d0:	d00b      	beq.n	80005ea <HAL_PCD_SetAddress+0x24>
 80005d2:	2201      	movs	r2, #1
 80005d4:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 80005d8:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 80005dc:	6800      	ldr	r0, [r0, #0]
 80005de:	f001 fc7b 	bl	8001ed8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 80005e8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80005ea:	2002      	movs	r0, #2
  return HAL_OK;
}
 80005ec:	bd10      	pop	{r4, pc}

080005ee <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80005ee:	b538      	push	{r3, r4, r5, lr}
 80005f0:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80005f2:	b248      	sxtb	r0, r1
 80005f4:	2800      	cmp	r0, #0
 80005f6:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80005fa:	bfb5      	itete	lt
 80005fc:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000600:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000604:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000606:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800060a:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 800060c:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 800060e:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8000610:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 8000612:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  ep->maxpacket = ep_mps;
 8000616:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8000618:	2b01      	cmp	r3, #1
 800061a:	d009      	beq.n	8000630 <HAL_PCD_EP_Open+0x42>
 800061c:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 800061e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000620:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000624:	f001 f9a4 	bl	8001970 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000628:	2000      	movs	r0, #0
 800062a:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
 800062e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000630:	2002      	movs	r0, #2
}
 8000632:	bd38      	pop	{r3, r4, r5, pc}

08000634 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000634:	b24b      	sxtb	r3, r1
 8000636:	2b00      	cmp	r3, #0
 8000638:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800063c:	bfb5      	itete	lt
 800063e:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000642:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000646:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000648:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800064c:	0fdb      	lsrs	r3, r3, #31
{  
 800064e:	b510      	push	{r4, lr}
  ep->num   = ep_addr & 0x7FU;
 8000650:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000652:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8000654:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 8000658:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800065a:	2b01      	cmp	r3, #1
 800065c:	d009      	beq.n	8000672 <HAL_PCD_EP_Close+0x3e>
 800065e:	2301      	movs	r3, #1
 8000660:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000664:	6800      	ldr	r0, [r0, #0]
 8000666:	f001 faf5 	bl	8001c54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800066a:	2000      	movs	r0, #0
 800066c:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000670:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000672:	2002      	movs	r0, #2
}
 8000674:	bd10      	pop	{r4, pc}

08000676 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000676:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8000678:	2600      	movs	r6, #0
 800067a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800067e:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;  
 8000680:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 8000682:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000686:	f505 710a 	add.w	r1, r5, #552	; 0x228
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800068a:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 800068c:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 8000690:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  ep->xfer_count = 0U;
 8000694:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  ep->is_in = 0U;
 8000698:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    USB_EPStartXfer(hpcd->Instance , ep);
 800069c:	6800      	ldr	r0, [r0, #0]
 800069e:	f001 fc3d 	bl	8001f1c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80006a2:	4630      	mov	r0, r6
 80006a4:	bd70      	pop	{r4, r5, r6, pc}

080006a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80006a6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80006aa:	b570      	push	{r4, r5, r6, lr}
 80006ac:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80006ae:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 80006b0:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 80006b2:	2600      	movs	r6, #0
  ep->is_in = 1U;
 80006b4:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7FU;
 80006b6:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80006ba:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80006be:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 80006c0:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 80006c2:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80006c4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    USB_EPStartXfer(hpcd->Instance , ep);
 80006c8:	6800      	ldr	r0, [r0, #0]
 80006ca:	f001 fc27 	bl	8001f1c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80006ce:	4630      	mov	r0, r6
 80006d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080006d4 <HAL_PCD_IRQHandler>:
{ 
 80006d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80006d8:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80006da:	6800      	ldr	r0, [r0, #0]
 80006dc:	f001 fc06 	bl	8001eec <USB_ReadInterrupts>
 80006e0:	0400      	lsls	r0, r0, #16
 80006e2:	f100 8098 	bmi.w	8000816 <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80006e6:	6820      	ldr	r0, [r4, #0]
 80006e8:	f001 fc00 	bl	8001eec <USB_ReadInterrupts>
 80006ec:	0541      	lsls	r1, r0, #21
 80006ee:	d50f      	bpl.n	8000710 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80006f0:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80006f2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80006f4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80006f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006fc:	041b      	lsls	r3, r3, #16
 80006fe:	0c1b      	lsrs	r3, r3, #16
 8000700:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000704:	f002 fb2b 	bl	8002d5e <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000708:	2100      	movs	r1, #0
 800070a:	4620      	mov	r0, r4
 800070c:	f7ff ff5b 	bl	80005c6 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000710:	6820      	ldr	r0, [r4, #0]
 8000712:	f001 fbeb 	bl	8001eec <USB_ReadInterrupts>
 8000716:	0447      	lsls	r7, r0, #17
 8000718:	d508      	bpl.n	800072c <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 800071a:	6822      	ldr	r2, [r4, #0]
 800071c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000720:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000724:	041b      	lsls	r3, r3, #16
 8000726:	0c1b      	lsrs	r3, r3, #16
 8000728:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 800072c:	6820      	ldr	r0, [r4, #0]
 800072e:	f001 fbdd 	bl	8001eec <USB_ReadInterrupts>
 8000732:	0486      	lsls	r6, r0, #18
 8000734:	d508      	bpl.n	8000748 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000736:	6822      	ldr	r2, [r4, #0]
 8000738:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800073c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000740:	041b      	lsls	r3, r3, #16
 8000742:	0c1b      	lsrs	r3, r3, #16
 8000744:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000748:	6820      	ldr	r0, [r4, #0]
 800074a:	f001 fbcf 	bl	8001eec <USB_ReadInterrupts>
 800074e:	04c5      	lsls	r5, r0, #19
 8000750:	d51c      	bpl.n	800078c <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000752:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000754:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000756:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800075a:	f023 0304 	bic.w	r3, r3, #4
 800075e:	041b      	lsls	r3, r3, #16
 8000760:	0c1b      	lsrs	r3, r3, #16
 8000762:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000766:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800076a:	f023 0308 	bic.w	r3, r3, #8
 800076e:	041b      	lsls	r3, r3, #16
 8000770:	0c1b      	lsrs	r3, r3, #16
 8000772:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000776:	f002 fb0f 	bl	8002d98 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 800077a:	6822      	ldr	r2, [r4, #0]
 800077c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000780:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000784:	041b      	lsls	r3, r3, #16
 8000786:	0c1b      	lsrs	r3, r3, #16
 8000788:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 800078c:	6820      	ldr	r0, [r4, #0]
 800078e:	f001 fbad 	bl	8001eec <USB_ReadInterrupts>
 8000792:	0500      	lsls	r0, r0, #20
 8000794:	d51d      	bpl.n	80007d2 <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000796:	6820      	ldr	r0, [r4, #0]
 8000798:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800079c:	b29b      	uxth	r3, r3
 800079e:	f043 0308 	orr.w	r3, r3, #8
 80007a2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80007a6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80007aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007ae:	041b      	lsls	r3, r3, #16
 80007b0:	0c1b      	lsrs	r3, r3, #16
 80007b2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80007b6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 80007c4:	f001 fb92 	bl	8001eec <USB_ReadInterrupts>
 80007c8:	04c1      	lsls	r1, r0, #19
 80007ca:	d402      	bmi.n	80007d2 <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 80007cc:	4620      	mov	r0, r4
 80007ce:	f002 fad3 	bl	8002d78 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80007d2:	6820      	ldr	r0, [r4, #0]
 80007d4:	f001 fb8a 	bl	8001eec <USB_ReadInterrupts>
 80007d8:	0582      	lsls	r2, r0, #22
 80007da:	d50b      	bpl.n	80007f4 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80007dc:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80007de:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80007e0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80007e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80007e8:	041b      	lsls	r3, r3, #16
 80007ea:	0c1b      	lsrs	r3, r3, #16
 80007ec:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80007f0:	f002 fab1 	bl	8002d56 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80007f4:	6820      	ldr	r0, [r4, #0]
 80007f6:	f001 fb79 	bl	8001eec <USB_ReadInterrupts>
 80007fa:	05c3      	lsls	r3, r0, #23
 80007fc:	d508      	bpl.n	8000810 <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80007fe:	6822      	ldr	r2, [r4, #0]
 8000800:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000808:	041b      	lsls	r3, r3, #16
 800080a:	0c1b      	lsrs	r3, r3, #16
 800080c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000810:	b002      	add	sp, #8
 8000812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000816:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000818:	4fc8      	ldr	r7, [pc, #800]	; (8000b3c <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800081a:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8000b40 <HAL_PCD_IRQHandler+0x46c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800081e:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8000b44 <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 8000822:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 8000826:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800082a:	6820      	ldr	r0, [r4, #0]
 800082c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000830:	b29b      	uxth	r3, r3
 8000832:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000836:	041b      	lsls	r3, r3, #16
 8000838:	f57f af55 	bpl.w	80006e6 <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800083c:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 8000840:	f015 050f 	ands.w	r5, r5, #15
 8000844:	f040 80ab 	bne.w	800099e <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000848:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800084c:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 800084e:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000852:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000854:	d126      	bne.n	80008a4 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000856:	403b      	ands	r3, r7
 8000858:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800085a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800085e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000862:	b29b      	uxth	r3, r3
 8000864:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000868:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800086c:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000870:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000872:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000876:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000878:	4413      	add	r3, r2
 800087a:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800087c:	4620      	mov	r0, r4
 800087e:	f002 fa63 	bl	8002d48 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8000882:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000886:	2b00      	cmp	r3, #0
 8000888:	d0cf      	beq.n	800082a <HAL_PCD_IRQHandler+0x156>
 800088a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800088c:	2a00      	cmp	r2, #0
 800088e:	d1cc      	bne.n	800082a <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000890:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000894:	6821      	ldr	r1, [r4, #0]
 8000896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800089a:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800089e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 80008a2:	e7c2      	b.n	800082a <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80008a4:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80008a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80008ac:	051a      	lsls	r2, r3, #20
 80008ae:	d51f      	bpl.n	80008f0 <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008b0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80008b4:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80008be:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80008c2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80008c6:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008ce:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80008d2:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 80008d6:	f001 fc21 	bl	800211c <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80008da:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80008dc:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80008de:	8813      	ldrh	r3, [r2, #0]
 80008e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008e4:	051b      	lsls	r3, r3, #20
 80008e6:	0d1b      	lsrs	r3, r3, #20
 80008e8:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80008ea:	f002 fa1f 	bl	8002d2c <HAL_PCD_SetupStageCallback>
 80008ee:	e79c      	b.n	800082a <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80008f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80008f4:	041b      	lsls	r3, r3, #16
 80008f6:	d598      	bpl.n	800082a <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80008f8:	8803      	ldrh	r3, [r0, #0]
 80008fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008fe:	051b      	lsls	r3, r3, #20
 8000900:	0d1b      	lsrs	r3, r3, #20
 8000902:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000904:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000908:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 800090c:	b29b      	uxth	r3, r3
 800090e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000912:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000916:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800091a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800091e:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 8000922:	b163      	cbz	r3, 800093e <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000924:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8000928:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 800092c:	f001 fbf6 	bl	800211c <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8000930:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8000934:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8000938:	4413      	add	r3, r2
 800093a:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800093e:	2100      	movs	r1, #0
 8000940:	4620      	mov	r0, r4
 8000942:	f002 f9f9 	bl	8002d38 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000946:	6822      	ldr	r2, [r4, #0]
 8000948:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 800094c:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000950:	2d3e      	cmp	r5, #62	; 0x3e
 8000952:	b289      	uxth	r1, r1
 8000954:	f101 0106 	add.w	r1, r1, #6
 8000958:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800095c:	d917      	bls.n	800098e <HAL_PCD_IRQHandler+0x2ba>
 800095e:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8000962:	06ee      	lsls	r6, r5, #27
 8000964:	bf04      	itt	eq
 8000966:	f103 33ff 	addeq.w	r3, r3, #4294967295
 800096a:	b29b      	uxtheq	r3, r3
 800096c:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8000970:	b29b      	uxth	r3, r3
 8000972:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000976:	8813      	ldrh	r3, [r2, #0]
 8000978:	b29b      	uxth	r3, r3
 800097a:	ea03 0308 	and.w	r3, r3, r8
 800097e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800098a:	8013      	strh	r3, [r2, #0]
 800098c:	e74d      	b.n	800082a <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800098e:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8000992:	07ed      	lsls	r5, r5, #31
 8000994:	bf44      	itt	mi
 8000996:	3301      	addmi	r3, #1
 8000998:	b29b      	uxthmi	r3, r3
 800099a:	029b      	lsls	r3, r3, #10
 800099c:	e7e8      	b.n	8000970 <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800099e:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80009a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80009ac:	0419      	lsls	r1, r3, #16
 80009ae:	d53f      	bpl.n	8000a30 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80009b0:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80009b4:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80009b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009bc:	051b      	lsls	r3, r3, #20
 80009be:	0d1b      	lsrs	r3, r3, #20
 80009c0:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80009c4:	eb04 010a 	add.w	r1, r4, sl
 80009c8:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d174      	bne.n	8000aba <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80009d0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80009d4:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 80009d8:	b29b      	uxth	r3, r3
 80009da:	3306      	adds	r3, #6
 80009dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80009e0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80009e4:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 80009e8:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 80009ec:	b136      	cbz	r6, 80009fc <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80009ee:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 80009f2:	4633      	mov	r3, r6
 80009f4:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 80009f8:	f001 fb90 	bl	800211c <USB_ReadPMA>
 80009fc:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 8000a00:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 8000a04:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 8000a08:	4433      	add	r3, r6
 8000a0a:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000a0e:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 8000a12:	4432      	add	r2, r6
 8000a14:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000a18:	b123      	cbz	r3, 8000a24 <HAL_PCD_IRQHandler+0x350>
 8000a1a:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8000a1e:	4286      	cmp	r6, r0
 8000a20:	f080 8086 	bcs.w	8000b30 <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000a24:	44a2      	add	sl, r4
 8000a26:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 8000a2a:	4620      	mov	r0, r4
 8000a2c:	f002 f984 	bl	8002d38 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000a30:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000a34:	061a      	lsls	r2, r3, #24
 8000a36:	f57f aef8 	bpl.w	800082a <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a3a:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8000a3c:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a3e:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000a42:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	403b      	ands	r3, r7
 8000a48:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000a4c:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8000a50:	3502      	adds	r5, #2
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d178      	bne.n	8000b48 <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a56:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a5a:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	3302      	adds	r3, #2
 8000a62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a66:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a6a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000a6e:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000a72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a76:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 8000a78:	b11b      	cbz	r3, 8000a82 <HAL_PCD_IRQHandler+0x3ae>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000a7a:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8000a7c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000a7e:	f001 fa3b 	bl	8001ef8 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a82:	6822      	ldr	r2, [r4, #0]
 8000a84:	4426      	add	r6, r4
 8000a86:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000a8a:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	3302      	adds	r3, #2
 8000a92:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000a96:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000a9a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 8000a9e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000aa0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000aa4:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8000aa6:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8000aa8:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8000aaa:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000aac:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	f040 8085 	bne.w	8000bbe <HAL_PCD_IRQHandler+0x4ea>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000ab4:	f002 f948 	bl	8002d48 <HAL_PCD_DataInStageCallback>
 8000ab8:	e6b7      	b.n	800082a <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000aba:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 8000abe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000ac2:	00db      	lsls	r3, r3, #3
 8000ac4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000ac8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000acc:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000ace:	d021      	beq.n	8000b14 <HAL_PCD_IRQHandler+0x440>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000ad0:	3202      	adds	r2, #2
 8000ad2:	4413      	add	r3, r2
 8000ad4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000ad8:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000adc:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000ae0:	b136      	cbz	r6, 8000af0 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000ae2:	4633      	mov	r3, r6
 8000ae4:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000ae8:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000aec:	f001 fb16 	bl	800211c <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8000af0:	eb04 030a 	add.w	r3, r4, sl
 8000af4:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8000af8:	6822      	ldr	r2, [r4, #0]
 8000afa:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000afe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b02:	051b      	lsls	r3, r3, #20
 8000b04:	0d1b      	lsrs	r3, r3, #20
 8000b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000b0e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000b12:	e773      	b.n	80009fc <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000b14:	3206      	adds	r2, #6
 8000b16:	4413      	add	r3, r2
 8000b18:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b1c:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000b20:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000b24:	2e00      	cmp	r6, #0
 8000b26:	d0e3      	beq.n	8000af0 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000b28:	4633      	mov	r3, r6
 8000b2a:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8000b2e:	e7db      	b.n	8000ae8 <HAL_PCD_IRQHandler+0x414>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000b30:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8000b34:	4620      	mov	r0, r4
 8000b36:	f7ff fd9e 	bl	8000676 <HAL_PCD_EP_Receive>
 8000b3a:	e779      	b.n	8000a30 <HAL_PCD_IRQHandler+0x35c>
 8000b3c:	ffff8f0f 	.word	0xffff8f0f
 8000b40:	ffffbf8f 	.word	0xffffbf8f
 8000b44:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000b48:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000b4c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b56:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000b5a:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000b5c:	d020      	beq.n	8000ba0 <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b5e:	3202      	adds	r2, #2
 8000b60:	4413      	add	r3, r2
 8000b62:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b66:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000b6a:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000b6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b72:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000b74:	b11b      	cbz	r3, 8000b7e <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8000b76:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000b78:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000b7a:	f001 f9bd 	bl	8001ef8 <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8000b7e:	19a3      	adds	r3, r4, r6
 8000b80:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000b84:	6822      	ldr	r2, [r4, #0]
 8000b86:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000b8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b8e:	051b      	lsls	r3, r3, #20
 8000b90:	0d1b      	lsrs	r3, r3, #20
 8000b92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b9a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000b9e:	e770      	b.n	8000a82 <HAL_PCD_IRQHandler+0x3ae>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000ba0:	3206      	adds	r2, #6
 8000ba2:	4413      	add	r3, r2
 8000ba4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000ba8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000bac:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000bb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bb4:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0e1      	beq.n	8000b7e <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000bba:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8000bbc:	e7dc      	b.n	8000b78 <HAL_PCD_IRQHandler+0x4a4>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000bbe:	f7ff fd72 	bl	80006a6 <HAL_PCD_EP_Transmit>
 8000bc2:	e632      	b.n	800082a <HAL_PCD_IRQHandler+0x156>

08000bc4 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 8000bc4:	2201      	movs	r2, #1
{
 8000bc6:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8000bc8:	b24b      	sxtb	r3, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000bd0:	bfb5      	itete	lt
 8000bd2:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000bd6:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000bda:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000bdc:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000be0:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 8000be2:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 8000be4:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000be6:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000be8:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8000bea:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000bee:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d00e      	beq.n	8000c12 <HAL_PCD_EP_SetStall+0x4e>
 8000bf4:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8000bf8:	6800      	ldr	r0, [r0, #0]
 8000bfa:	f001 f8f9 	bl	8001df0 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8000bfe:	b925      	cbnz	r5, 8000c0a <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000c00:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000c04:	6820      	ldr	r0, [r4, #0]
 8000c06:	f001 f975 	bl	8001ef4 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000c10:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000c12:	2002      	movs	r0, #2
}
 8000c14:	bd38      	pop	{r3, r4, r5, pc}

08000c16 <HAL_PCD_EP_ClrStall>:
{
 8000c16:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 8000c18:	2400      	movs	r4, #0
  if ((0x80U & ep_addr) == 0x80U)
 8000c1a:	b24b      	sxtb	r3, r1
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c22:	bfb5      	itete	lt
 8000c24:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000c28:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c2c:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000c2e:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000c32:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8000c34:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000c36:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000c38:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000c3a:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000c3e:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d009      	beq.n	8000c58 <HAL_PCD_EP_ClrStall+0x42>
 8000c44:	2301      	movs	r3, #1
 8000c46:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8000c4a:	6800      	ldr	r0, [r0, #0]
 8000c4c:	f001 f902 	bl	8001e54 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8000c50:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
  return HAL_OK;
 8000c54:	4620      	mov	r0, r4
 8000c56:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8000c58:	2002      	movs	r0, #2
}
 8000c5a:	bd38      	pop	{r3, r4, r5, pc}

08000c5c <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8000c5c:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c60:	bf1b      	ittet	ne
 8000c62:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8000c66:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000c6a:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c6e:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000c70:	bf08      	it	eq
 8000c72:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8000c76:	b91a      	cbnz	r2, 8000c80 <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8000c78:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8000c7a:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8000c80:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8000c82:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000c84:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8000c86:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000c88:	8103      	strh	r3, [r0, #8]
 8000c8a:	e7f7      	b.n	8000c7c <HAL_PCDEx_PMAConfig+0x20>

08000c8c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c8c:	6803      	ldr	r3, [r0, #0]
{
 8000c8e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c92:	07db      	lsls	r3, r3, #31
{
 8000c94:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c96:	d410      	bmi.n	8000cba <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c98:	682b      	ldr	r3, [r5, #0]
 8000c9a:	079f      	lsls	r7, r3, #30
 8000c9c:	d45e      	bmi.n	8000d5c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c9e:	682b      	ldr	r3, [r5, #0]
 8000ca0:	0719      	lsls	r1, r3, #28
 8000ca2:	f100 8095 	bmi.w	8000dd0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ca6:	682b      	ldr	r3, [r5, #0]
 8000ca8:	075a      	lsls	r2, r3, #29
 8000caa:	f100 80bf 	bmi.w	8000e2c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cae:	69ea      	ldr	r2, [r5, #28]
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 812d 	bne.w	8000f10 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	e014      	b.n	8000ce4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cba:	4c90      	ldr	r4, [pc, #576]	; (8000efc <HAL_RCC_OscConfig+0x270>)
 8000cbc:	6863      	ldr	r3, [r4, #4]
 8000cbe:	f003 030c 	and.w	r3, r3, #12
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	d007      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cc6:	6863      	ldr	r3, [r4, #4]
 8000cc8:	f003 030c 	and.w	r3, r3, #12
 8000ccc:	2b08      	cmp	r3, #8
 8000cce:	d10c      	bne.n	8000cea <HAL_RCC_OscConfig+0x5e>
 8000cd0:	6863      	ldr	r3, [r4, #4]
 8000cd2:	03de      	lsls	r6, r3, #15
 8000cd4:	d509      	bpl.n	8000cea <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd6:	6823      	ldr	r3, [r4, #0]
 8000cd8:	039c      	lsls	r4, r3, #14
 8000cda:	d5dd      	bpl.n	8000c98 <HAL_RCC_OscConfig+0xc>
 8000cdc:	686b      	ldr	r3, [r5, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1da      	bne.n	8000c98 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000ce2:	2001      	movs	r0, #1
}
 8000ce4:	b002      	add	sp, #8
 8000ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cea:	686b      	ldr	r3, [r5, #4]
 8000cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cf0:	d110      	bne.n	8000d14 <HAL_RCC_OscConfig+0x88>
 8000cf2:	6823      	ldr	r3, [r4, #0]
 8000cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cfa:	f7ff fa69 	bl	80001d0 <HAL_GetTick>
 8000cfe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d00:	6823      	ldr	r3, [r4, #0]
 8000d02:	0398      	lsls	r0, r3, #14
 8000d04:	d4c8      	bmi.n	8000c98 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d06:	f7ff fa63 	bl	80001d0 <HAL_GetTick>
 8000d0a:	1b80      	subs	r0, r0, r6
 8000d0c:	2864      	cmp	r0, #100	; 0x64
 8000d0e:	d9f7      	bls.n	8000d00 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000d10:	2003      	movs	r0, #3
 8000d12:	e7e7      	b.n	8000ce4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d14:	b99b      	cbnz	r3, 8000d3e <HAL_RCC_OscConfig+0xb2>
 8000d16:	6823      	ldr	r3, [r4, #0]
 8000d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d1c:	6023      	str	r3, [r4, #0]
 8000d1e:	6823      	ldr	r3, [r4, #0]
 8000d20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d24:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d26:	f7ff fa53 	bl	80001d0 <HAL_GetTick>
 8000d2a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d2c:	6823      	ldr	r3, [r4, #0]
 8000d2e:	0399      	lsls	r1, r3, #14
 8000d30:	d5b2      	bpl.n	8000c98 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d32:	f7ff fa4d 	bl	80001d0 <HAL_GetTick>
 8000d36:	1b80      	subs	r0, r0, r6
 8000d38:	2864      	cmp	r0, #100	; 0x64
 8000d3a:	d9f7      	bls.n	8000d2c <HAL_RCC_OscConfig+0xa0>
 8000d3c:	e7e8      	b.n	8000d10 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d42:	6823      	ldr	r3, [r4, #0]
 8000d44:	d103      	bne.n	8000d4e <HAL_RCC_OscConfig+0xc2>
 8000d46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d4a:	6023      	str	r3, [r4, #0]
 8000d4c:	e7d1      	b.n	8000cf2 <HAL_RCC_OscConfig+0x66>
 8000d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d52:	6023      	str	r3, [r4, #0]
 8000d54:	6823      	ldr	r3, [r4, #0]
 8000d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d5a:	e7cd      	b.n	8000cf8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d5c:	4c67      	ldr	r4, [pc, #412]	; (8000efc <HAL_RCC_OscConfig+0x270>)
 8000d5e:	6863      	ldr	r3, [r4, #4]
 8000d60:	f013 0f0c 	tst.w	r3, #12
 8000d64:	d007      	beq.n	8000d76 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d66:	6863      	ldr	r3, [r4, #4]
 8000d68:	f003 030c 	and.w	r3, r3, #12
 8000d6c:	2b08      	cmp	r3, #8
 8000d6e:	d110      	bne.n	8000d92 <HAL_RCC_OscConfig+0x106>
 8000d70:	6863      	ldr	r3, [r4, #4]
 8000d72:	03da      	lsls	r2, r3, #15
 8000d74:	d40d      	bmi.n	8000d92 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d76:	6823      	ldr	r3, [r4, #0]
 8000d78:	079b      	lsls	r3, r3, #30
 8000d7a:	d502      	bpl.n	8000d82 <HAL_RCC_OscConfig+0xf6>
 8000d7c:	692b      	ldr	r3, [r5, #16]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d1af      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d82:	6823      	ldr	r3, [r4, #0]
 8000d84:	696a      	ldr	r2, [r5, #20]
 8000d86:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d8a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d8e:	6023      	str	r3, [r4, #0]
 8000d90:	e785      	b.n	8000c9e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d92:	692a      	ldr	r2, [r5, #16]
 8000d94:	4b5a      	ldr	r3, [pc, #360]	; (8000f00 <HAL_RCC_OscConfig+0x274>)
 8000d96:	b16a      	cbz	r2, 8000db4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000d98:	2201      	movs	r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fa18 	bl	80001d0 <HAL_GetTick>
 8000da0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da2:	6823      	ldr	r3, [r4, #0]
 8000da4:	079f      	lsls	r7, r3, #30
 8000da6:	d4ec      	bmi.n	8000d82 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000da8:	f7ff fa12 	bl	80001d0 <HAL_GetTick>
 8000dac:	1b80      	subs	r0, r0, r6
 8000dae:	2802      	cmp	r0, #2
 8000db0:	d9f7      	bls.n	8000da2 <HAL_RCC_OscConfig+0x116>
 8000db2:	e7ad      	b.n	8000d10 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000db4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000db6:	f7ff fa0b 	bl	80001d0 <HAL_GetTick>
 8000dba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	0798      	lsls	r0, r3, #30
 8000dc0:	f57f af6d 	bpl.w	8000c9e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dc4:	f7ff fa04 	bl	80001d0 <HAL_GetTick>
 8000dc8:	1b80      	subs	r0, r0, r6
 8000dca:	2802      	cmp	r0, #2
 8000dcc:	d9f6      	bls.n	8000dbc <HAL_RCC_OscConfig+0x130>
 8000dce:	e79f      	b.n	8000d10 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dd0:	69aa      	ldr	r2, [r5, #24]
 8000dd2:	4c4a      	ldr	r4, [pc, #296]	; (8000efc <HAL_RCC_OscConfig+0x270>)
 8000dd4:	4b4b      	ldr	r3, [pc, #300]	; (8000f04 <HAL_RCC_OscConfig+0x278>)
 8000dd6:	b1da      	cbz	r2, 8000e10 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000dd8:	2201      	movs	r2, #1
 8000dda:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ddc:	f7ff f9f8 	bl	80001d0 <HAL_GetTick>
 8000de0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000de4:	079b      	lsls	r3, r3, #30
 8000de6:	d50d      	bpl.n	8000e04 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000de8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000dec:	4b46      	ldr	r3, [pc, #280]	; (8000f08 <HAL_RCC_OscConfig+0x27c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000df4:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000df6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000df8:	9b01      	ldr	r3, [sp, #4]
 8000dfa:	1e5a      	subs	r2, r3, #1
 8000dfc:	9201      	str	r2, [sp, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1f9      	bne.n	8000df6 <HAL_RCC_OscConfig+0x16a>
 8000e02:	e750      	b.n	8000ca6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e04:	f7ff f9e4 	bl	80001d0 <HAL_GetTick>
 8000e08:	1b80      	subs	r0, r0, r6
 8000e0a:	2802      	cmp	r0, #2
 8000e0c:	d9e9      	bls.n	8000de2 <HAL_RCC_OscConfig+0x156>
 8000e0e:	e77f      	b.n	8000d10 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000e10:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e12:	f7ff f9dd 	bl	80001d0 <HAL_GetTick>
 8000e16:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e1a:	079f      	lsls	r7, r3, #30
 8000e1c:	f57f af43 	bpl.w	8000ca6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e20:	f7ff f9d6 	bl	80001d0 <HAL_GetTick>
 8000e24:	1b80      	subs	r0, r0, r6
 8000e26:	2802      	cmp	r0, #2
 8000e28:	d9f6      	bls.n	8000e18 <HAL_RCC_OscConfig+0x18c>
 8000e2a:	e771      	b.n	8000d10 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e2c:	4c33      	ldr	r4, [pc, #204]	; (8000efc <HAL_RCC_OscConfig+0x270>)
 8000e2e:	69e3      	ldr	r3, [r4, #28]
 8000e30:	00d8      	lsls	r0, r3, #3
 8000e32:	d424      	bmi.n	8000e7e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000e34:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	69e3      	ldr	r3, [r4, #28]
 8000e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	61e3      	str	r3, [r4, #28]
 8000e3e:	69e3      	ldr	r3, [r4, #28]
 8000e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e48:	4e30      	ldr	r6, [pc, #192]	; (8000f0c <HAL_RCC_OscConfig+0x280>)
 8000e4a:	6833      	ldr	r3, [r6, #0]
 8000e4c:	05d9      	lsls	r1, r3, #23
 8000e4e:	d518      	bpl.n	8000e82 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e50:	68eb      	ldr	r3, [r5, #12]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d126      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x218>
 8000e56:	6a23      	ldr	r3, [r4, #32]
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e5e:	f7ff f9b7 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e62:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e66:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e68:	6a23      	ldr	r3, [r4, #32]
 8000e6a:	079b      	lsls	r3, r3, #30
 8000e6c:	d53f      	bpl.n	8000eee <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000e6e:	2f00      	cmp	r7, #0
 8000e70:	f43f af1d 	beq.w	8000cae <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e74:	69e3      	ldr	r3, [r4, #28]
 8000e76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	61e3      	str	r3, [r4, #28]
 8000e7c:	e717      	b.n	8000cae <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000e7e:	2700      	movs	r7, #0
 8000e80:	e7e2      	b.n	8000e48 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e82:	6833      	ldr	r3, [r6, #0]
 8000e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e88:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e8a:	f7ff f9a1 	bl	80001d0 <HAL_GetTick>
 8000e8e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e90:	6833      	ldr	r3, [r6, #0]
 8000e92:	05da      	lsls	r2, r3, #23
 8000e94:	d4dc      	bmi.n	8000e50 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e96:	f7ff f99b 	bl	80001d0 <HAL_GetTick>
 8000e9a:	eba0 0008 	sub.w	r0, r0, r8
 8000e9e:	2864      	cmp	r0, #100	; 0x64
 8000ea0:	d9f6      	bls.n	8000e90 <HAL_RCC_OscConfig+0x204>
 8000ea2:	e735      	b.n	8000d10 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea4:	b9ab      	cbnz	r3, 8000ed2 <HAL_RCC_OscConfig+0x246>
 8000ea6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ea8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eac:	f023 0301 	bic.w	r3, r3, #1
 8000eb0:	6223      	str	r3, [r4, #32]
 8000eb2:	6a23      	ldr	r3, [r4, #32]
 8000eb4:	f023 0304 	bic.w	r3, r3, #4
 8000eb8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000eba:	f7ff f989 	bl	80001d0 <HAL_GetTick>
 8000ebe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ec0:	6a23      	ldr	r3, [r4, #32]
 8000ec2:	0798      	lsls	r0, r3, #30
 8000ec4:	d5d3      	bpl.n	8000e6e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ec6:	f7ff f983 	bl	80001d0 <HAL_GetTick>
 8000eca:	1b80      	subs	r0, r0, r6
 8000ecc:	4540      	cmp	r0, r8
 8000ece:	d9f7      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x234>
 8000ed0:	e71e      	b.n	8000d10 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed2:	2b05      	cmp	r3, #5
 8000ed4:	6a23      	ldr	r3, [r4, #32]
 8000ed6:	d103      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x254>
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	6223      	str	r3, [r4, #32]
 8000ede:	e7ba      	b.n	8000e56 <HAL_RCC_OscConfig+0x1ca>
 8000ee0:	f023 0301 	bic.w	r3, r3, #1
 8000ee4:	6223      	str	r3, [r4, #32]
 8000ee6:	6a23      	ldr	r3, [r4, #32]
 8000ee8:	f023 0304 	bic.w	r3, r3, #4
 8000eec:	e7b6      	b.n	8000e5c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eee:	f7ff f96f 	bl	80001d0 <HAL_GetTick>
 8000ef2:	eba0 0008 	sub.w	r0, r0, r8
 8000ef6:	42b0      	cmp	r0, r6
 8000ef8:	d9b6      	bls.n	8000e68 <HAL_RCC_OscConfig+0x1dc>
 8000efa:	e709      	b.n	8000d10 <HAL_RCC_OscConfig+0x84>
 8000efc:	40021000 	.word	0x40021000
 8000f00:	42420000 	.word	0x42420000
 8000f04:	42420480 	.word	0x42420480
 8000f08:	200000c8 	.word	0x200000c8
 8000f0c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f10:	4c22      	ldr	r4, [pc, #136]	; (8000f9c <HAL_RCC_OscConfig+0x310>)
 8000f12:	6863      	ldr	r3, [r4, #4]
 8000f14:	f003 030c 	and.w	r3, r3, #12
 8000f18:	2b08      	cmp	r3, #8
 8000f1a:	f43f aee2 	beq.w	8000ce2 <HAL_RCC_OscConfig+0x56>
 8000f1e:	2300      	movs	r3, #0
 8000f20:	4e1f      	ldr	r6, [pc, #124]	; (8000fa0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f22:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000f24:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f26:	d12b      	bne.n	8000f80 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000f28:	f7ff f952 	bl	80001d0 <HAL_GetTick>
 8000f2c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f2e:	6823      	ldr	r3, [r4, #0]
 8000f30:	0199      	lsls	r1, r3, #6
 8000f32:	d41f      	bmi.n	8000f74 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f34:	6a2b      	ldr	r3, [r5, #32]
 8000f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f3a:	d105      	bne.n	8000f48 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f3c:	6862      	ldr	r2, [r4, #4]
 8000f3e:	68a9      	ldr	r1, [r5, #8]
 8000f40:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000f44:	430a      	orrs	r2, r1
 8000f46:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f48:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000f4a:	6862      	ldr	r2, [r4, #4]
 8000f4c:	430b      	orrs	r3, r1
 8000f4e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000f52:	4313      	orrs	r3, r2
 8000f54:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f56:	2301      	movs	r3, #1
 8000f58:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000f5a:	f7ff f939 	bl	80001d0 <HAL_GetTick>
 8000f5e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f60:	6823      	ldr	r3, [r4, #0]
 8000f62:	019a      	lsls	r2, r3, #6
 8000f64:	f53f aea7 	bmi.w	8000cb6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f68:	f7ff f932 	bl	80001d0 <HAL_GetTick>
 8000f6c:	1b40      	subs	r0, r0, r5
 8000f6e:	2802      	cmp	r0, #2
 8000f70:	d9f6      	bls.n	8000f60 <HAL_RCC_OscConfig+0x2d4>
 8000f72:	e6cd      	b.n	8000d10 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f74:	f7ff f92c 	bl	80001d0 <HAL_GetTick>
 8000f78:	1bc0      	subs	r0, r0, r7
 8000f7a:	2802      	cmp	r0, #2
 8000f7c:	d9d7      	bls.n	8000f2e <HAL_RCC_OscConfig+0x2a2>
 8000f7e:	e6c7      	b.n	8000d10 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000f80:	f7ff f926 	bl	80001d0 <HAL_GetTick>
 8000f84:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	019b      	lsls	r3, r3, #6
 8000f8a:	f57f ae94 	bpl.w	8000cb6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f8e:	f7ff f91f 	bl	80001d0 <HAL_GetTick>
 8000f92:	1b40      	subs	r0, r0, r5
 8000f94:	2802      	cmp	r0, #2
 8000f96:	d9f6      	bls.n	8000f86 <HAL_RCC_OscConfig+0x2fa>
 8000f98:	e6ba      	b.n	8000d10 <HAL_RCC_OscConfig+0x84>
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	42420060 	.word	0x42420060

08000fa4 <HAL_RCC_GetSysClockFreq>:
{
 8000fa4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000fa6:	4b19      	ldr	r3, [pc, #100]	; (800100c <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000fa8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000faa:	ac02      	add	r4, sp, #8
 8000fac:	f103 0510 	add.w	r5, r3, #16
 8000fb0:	4622      	mov	r2, r4
 8000fb2:	6818      	ldr	r0, [r3, #0]
 8000fb4:	6859      	ldr	r1, [r3, #4]
 8000fb6:	3308      	adds	r3, #8
 8000fb8:	c203      	stmia	r2!, {r0, r1}
 8000fba:	42ab      	cmp	r3, r5
 8000fbc:	4614      	mov	r4, r2
 8000fbe:	d1f7      	bne.n	8000fb0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	f88d 3004 	strb.w	r3, [sp, #4]
 8000fc6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000fc8:	4911      	ldr	r1, [pc, #68]	; (8001010 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000fca:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000fce:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000fd0:	f003 020c 	and.w	r2, r3, #12
 8000fd4:	2a08      	cmp	r2, #8
 8000fd6:	d117      	bne.n	8001008 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000fd8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000fdc:	a806      	add	r0, sp, #24
 8000fde:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fe0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000fe2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fe6:	d50c      	bpl.n	8001002 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fe8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fea:	480a      	ldr	r0, [pc, #40]	; (8001014 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fec:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ff0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ff2:	aa06      	add	r2, sp, #24
 8000ff4:	4413      	add	r3, r2
 8000ff6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ffa:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000ffe:	b007      	add	sp, #28
 8001000:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <HAL_RCC_GetSysClockFreq+0x74>)
 8001004:	4350      	muls	r0, r2
 8001006:	e7fa      	b.n	8000ffe <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800100a:	e7f8      	b.n	8000ffe <HAL_RCC_GetSysClockFreq+0x5a>
 800100c:	0800327c 	.word	0x0800327c
 8001010:	40021000 	.word	0x40021000
 8001014:	007a1200 	.word	0x007a1200
 8001018:	003d0900 	.word	0x003d0900

0800101c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800101c:	4a4d      	ldr	r2, [pc, #308]	; (8001154 <HAL_RCC_ClockConfig+0x138>)
{
 800101e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001022:	6813      	ldr	r3, [r2, #0]
{
 8001024:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	428b      	cmp	r3, r1
{
 800102c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800102e:	d328      	bcc.n	8001082 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001030:	682a      	ldr	r2, [r5, #0]
 8001032:	0791      	lsls	r1, r2, #30
 8001034:	d432      	bmi.n	800109c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001036:	07d2      	lsls	r2, r2, #31
 8001038:	d438      	bmi.n	80010ac <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800103a:	4a46      	ldr	r2, [pc, #280]	; (8001154 <HAL_RCC_ClockConfig+0x138>)
 800103c:	6813      	ldr	r3, [r2, #0]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	429e      	cmp	r6, r3
 8001044:	d373      	bcc.n	800112e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001046:	682a      	ldr	r2, [r5, #0]
 8001048:	4c43      	ldr	r4, [pc, #268]	; (8001158 <HAL_RCC_ClockConfig+0x13c>)
 800104a:	f012 0f04 	tst.w	r2, #4
 800104e:	d179      	bne.n	8001144 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001050:	0713      	lsls	r3, r2, #28
 8001052:	d506      	bpl.n	8001062 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001054:	6863      	ldr	r3, [r4, #4]
 8001056:	692a      	ldr	r2, [r5, #16]
 8001058:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800105c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001060:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001062:	f7ff ff9f 	bl	8000fa4 <HAL_RCC_GetSysClockFreq>
 8001066:	6863      	ldr	r3, [r4, #4]
 8001068:	4a3c      	ldr	r2, [pc, #240]	; (800115c <HAL_RCC_ClockConfig+0x140>)
 800106a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800106e:	5cd3      	ldrb	r3, [r2, r3]
 8001070:	40d8      	lsrs	r0, r3
 8001072:	4b3b      	ldr	r3, [pc, #236]	; (8001160 <HAL_RCC_ClockConfig+0x144>)
 8001074:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001076:	2000      	movs	r0, #0
 8001078:	f7ff f868 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 800107c:	2000      	movs	r0, #0
}
 800107e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001082:	6813      	ldr	r3, [r2, #0]
 8001084:	f023 0307 	bic.w	r3, r3, #7
 8001088:	430b      	orrs	r3, r1
 800108a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800108c:	6813      	ldr	r3, [r2, #0]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	4299      	cmp	r1, r3
 8001094:	d0cc      	beq.n	8001030 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001096:	2001      	movs	r0, #1
 8001098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800109c:	492e      	ldr	r1, [pc, #184]	; (8001158 <HAL_RCC_ClockConfig+0x13c>)
 800109e:	68a8      	ldr	r0, [r5, #8]
 80010a0:	684b      	ldr	r3, [r1, #4]
 80010a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010a6:	4303      	orrs	r3, r0
 80010a8:	604b      	str	r3, [r1, #4]
 80010aa:	e7c4      	b.n	8001036 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ac:	686a      	ldr	r2, [r5, #4]
 80010ae:	4c2a      	ldr	r4, [pc, #168]	; (8001158 <HAL_RCC_ClockConfig+0x13c>)
 80010b0:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b2:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010b4:	d11c      	bne.n	80010f0 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ba:	d0ec      	beq.n	8001096 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010bc:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010be:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010c2:	f023 0303 	bic.w	r3, r3, #3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80010ca:	f7ff f881 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ce:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80010d0:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d114      	bne.n	8001100 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80010d6:	6863      	ldr	r3, [r4, #4]
 80010d8:	f003 030c 	and.w	r3, r3, #12
 80010dc:	2b04      	cmp	r3, #4
 80010de:	d0ac      	beq.n	800103a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010e0:	f7ff f876 	bl	80001d0 <HAL_GetTick>
 80010e4:	1bc0      	subs	r0, r0, r7
 80010e6:	4540      	cmp	r0, r8
 80010e8:	d9f5      	bls.n	80010d6 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 80010ea:	2003      	movs	r0, #3
 80010ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010f0:	2a02      	cmp	r2, #2
 80010f2:	d102      	bne.n	80010fa <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010f4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010f8:	e7df      	b.n	80010ba <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010fa:	f013 0f02 	tst.w	r3, #2
 80010fe:	e7dc      	b.n	80010ba <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001100:	2b02      	cmp	r3, #2
 8001102:	d10f      	bne.n	8001124 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001104:	6863      	ldr	r3, [r4, #4]
 8001106:	f003 030c 	and.w	r3, r3, #12
 800110a:	2b08      	cmp	r3, #8
 800110c:	d095      	beq.n	800103a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800110e:	f7ff f85f 	bl	80001d0 <HAL_GetTick>
 8001112:	1bc0      	subs	r0, r0, r7
 8001114:	4540      	cmp	r0, r8
 8001116:	d9f5      	bls.n	8001104 <HAL_RCC_ClockConfig+0xe8>
 8001118:	e7e7      	b.n	80010ea <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800111a:	f7ff f859 	bl	80001d0 <HAL_GetTick>
 800111e:	1bc0      	subs	r0, r0, r7
 8001120:	4540      	cmp	r0, r8
 8001122:	d8e2      	bhi.n	80010ea <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001124:	6863      	ldr	r3, [r4, #4]
 8001126:	f013 0f0c 	tst.w	r3, #12
 800112a:	d1f6      	bne.n	800111a <HAL_RCC_ClockConfig+0xfe>
 800112c:	e785      	b.n	800103a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800112e:	6813      	ldr	r3, [r2, #0]
 8001130:	f023 0307 	bic.w	r3, r3, #7
 8001134:	4333      	orrs	r3, r6
 8001136:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001138:	6813      	ldr	r3, [r2, #0]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	429e      	cmp	r6, r3
 8001140:	d1a9      	bne.n	8001096 <HAL_RCC_ClockConfig+0x7a>
 8001142:	e780      	b.n	8001046 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001144:	6863      	ldr	r3, [r4, #4]
 8001146:	68e9      	ldr	r1, [r5, #12]
 8001148:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800114c:	430b      	orrs	r3, r1
 800114e:	6063      	str	r3, [r4, #4]
 8001150:	e77e      	b.n	8001050 <HAL_RCC_ClockConfig+0x34>
 8001152:	bf00      	nop
 8001154:	40022000 	.word	0x40022000
 8001158:	40021000 	.word	0x40021000
 800115c:	08003299 	.word	0x08003299
 8001160:	200000c8 	.word	0x200000c8

08001164 <HAL_RCC_GetHCLKFreq>:
}
 8001164:	4b01      	ldr	r3, [pc, #4]	; (800116c <HAL_RCC_GetHCLKFreq+0x8>)
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	200000c8 	.word	0x200000c8

08001170 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001172:	4a05      	ldr	r2, [pc, #20]	; (8001188 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800117a:	5cd3      	ldrb	r3, [r2, r3]
 800117c:	4a03      	ldr	r2, [pc, #12]	; (800118c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800117e:	6810      	ldr	r0, [r2, #0]
}    
 8001180:	40d8      	lsrs	r0, r3
 8001182:	4770      	bx	lr
 8001184:	40021000 	.word	0x40021000
 8001188:	080032a9 	.word	0x080032a9
 800118c:	200000c8 	.word	0x200000c8

08001190 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800119a:	5cd3      	ldrb	r3, [r2, r3]
 800119c:	4a03      	ldr	r2, [pc, #12]	; (80011ac <HAL_RCC_GetPCLK2Freq+0x1c>)
 800119e:	6810      	ldr	r0, [r2, #0]
} 
 80011a0:	40d8      	lsrs	r0, r3
 80011a2:	4770      	bx	lr
 80011a4:	40021000 	.word	0x40021000
 80011a8:	080032a9 	.word	0x080032a9
 80011ac:	200000c8 	.word	0x200000c8

080011b0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011b0:	6803      	ldr	r3, [r0, #0]
{
 80011b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011b6:	07d9      	lsls	r1, r3, #31
{
 80011b8:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011ba:	d520      	bpl.n	80011fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011bc:	4c35      	ldr	r4, [pc, #212]	; (8001294 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80011be:	69e3      	ldr	r3, [r4, #28]
 80011c0:	00da      	lsls	r2, r3, #3
 80011c2:	d432      	bmi.n	800122a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80011c4:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	69e3      	ldr	r3, [r4, #28]
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011cc:	61e3      	str	r3, [r4, #28]
 80011ce:	69e3      	ldr	r3, [r4, #28]
 80011d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d8:	4e2f      	ldr	r6, [pc, #188]	; (8001298 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80011da:	6833      	ldr	r3, [r6, #0]
 80011dc:	05db      	lsls	r3, r3, #23
 80011de:	d526      	bpl.n	800122e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80011e0:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80011e2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80011e6:	d136      	bne.n	8001256 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80011e8:	6a23      	ldr	r3, [r4, #32]
 80011ea:	686a      	ldr	r2, [r5, #4]
 80011ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011f0:	4313      	orrs	r3, r2
 80011f2:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011f4:	b11f      	cbz	r7, 80011fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011f6:	69e3      	ldr	r3, [r4, #28]
 80011f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011fc:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80011fe:	6828      	ldr	r0, [r5, #0]
 8001200:	0783      	lsls	r3, r0, #30
 8001202:	d506      	bpl.n	8001212 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001204:	4a23      	ldr	r2, [pc, #140]	; (8001294 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001206:	68a9      	ldr	r1, [r5, #8]
 8001208:	6853      	ldr	r3, [r2, #4]
 800120a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800120e:	430b      	orrs	r3, r1
 8001210:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001212:	f010 0010 	ands.w	r0, r0, #16
 8001216:	d01b      	beq.n	8001250 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001218:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800121a:	68e9      	ldr	r1, [r5, #12]
 800121c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800121e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001220:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001224:	430b      	orrs	r3, r1
 8001226:	6053      	str	r3, [r2, #4]
 8001228:	e012      	b.n	8001250 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800122a:	2700      	movs	r7, #0
 800122c:	e7d4      	b.n	80011d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800122e:	6833      	ldr	r3, [r6, #0]
 8001230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001234:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001236:	f7fe ffcb 	bl	80001d0 <HAL_GetTick>
 800123a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123c:	6833      	ldr	r3, [r6, #0]
 800123e:	05d8      	lsls	r0, r3, #23
 8001240:	d4ce      	bmi.n	80011e0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001242:	f7fe ffc5 	bl	80001d0 <HAL_GetTick>
 8001246:	eba0 0008 	sub.w	r0, r0, r8
 800124a:	2864      	cmp	r0, #100	; 0x64
 800124c:	d9f6      	bls.n	800123c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800124e:	2003      	movs	r0, #3
}
 8001250:	b002      	add	sp, #8
 8001252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001256:	686a      	ldr	r2, [r5, #4]
 8001258:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800125c:	4293      	cmp	r3, r2
 800125e:	d0c3      	beq.n	80011e8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001260:	2001      	movs	r0, #1
 8001262:	4a0e      	ldr	r2, [pc, #56]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001264:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001266:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001268:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800126a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800126e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001270:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001272:	07d9      	lsls	r1, r3, #31
 8001274:	d5b8      	bpl.n	80011e8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001276:	f7fe ffab 	bl	80001d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800127a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800127e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001280:	6a23      	ldr	r3, [r4, #32]
 8001282:	079a      	lsls	r2, r3, #30
 8001284:	d4b0      	bmi.n	80011e8 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001286:	f7fe ffa3 	bl	80001d0 <HAL_GetTick>
 800128a:	1b80      	subs	r0, r0, r6
 800128c:	4540      	cmp	r0, r8
 800128e:	d9f7      	bls.n	8001280 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001290:	e7dd      	b.n	800124e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000
 8001298:	40007000 	.word	0x40007000
 800129c:	42420440 	.word	0x42420440

080012a0 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80012a0:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 80012a2:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	f042 0201 	orr.w	r2, r2, #1
 80012aa:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	f042 0201 	orr.w	r2, r2, #1
 80012b2:	601a      	str	r2, [r3, #0]
}
 80012b4:	4770      	bx	lr

080012b6 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 80012b6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80012ba:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80012bc:	2b01      	cmp	r3, #1
 80012be:	f04f 0302 	mov.w	r3, #2
 80012c2:	d01c      	beq.n	80012fe <HAL_TIM_ConfigClockSource+0x48>
 80012c4:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 80012c6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80012ca:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80012cc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80012d0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80012d2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80012d6:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80012da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80012dc:	680a      	ldr	r2, [r1, #0]
 80012de:	2a40      	cmp	r2, #64	; 0x40
 80012e0:	d079      	beq.n	80013d6 <HAL_TIM_ConfigClockSource+0x120>
 80012e2:	d819      	bhi.n	8001318 <HAL_TIM_ConfigClockSource+0x62>
 80012e4:	2a10      	cmp	r2, #16
 80012e6:	f000 8093 	beq.w	8001410 <HAL_TIM_ConfigClockSource+0x15a>
 80012ea:	d80a      	bhi.n	8001302 <HAL_TIM_ConfigClockSource+0x4c>
 80012ec:	2a00      	cmp	r2, #0
 80012ee:	f000 8089 	beq.w	8001404 <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 80012f2:	2301      	movs	r3, #1
 80012f4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80012f8:	2300      	movs	r3, #0
 80012fa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80012fe:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001300:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001302:	2a20      	cmp	r2, #32
 8001304:	f000 808a 	beq.w	800141c <HAL_TIM_ConfigClockSource+0x166>
 8001308:	2a30      	cmp	r2, #48	; 0x30
 800130a:	d1f2      	bne.n	80012f2 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800130c:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800130e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001312:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001316:	e036      	b.n	8001386 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001318:	2a70      	cmp	r2, #112	; 0x70
 800131a:	d036      	beq.n	800138a <HAL_TIM_ConfigClockSource+0xd4>
 800131c:	d81b      	bhi.n	8001356 <HAL_TIM_ConfigClockSource+0xa0>
 800131e:	2a50      	cmp	r2, #80	; 0x50
 8001320:	d042      	beq.n	80013a8 <HAL_TIM_ConfigClockSource+0xf2>
 8001322:	2a60      	cmp	r2, #96	; 0x60
 8001324:	d1e5      	bne.n	80012f2 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001326:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001328:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800132a:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800132e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001330:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001332:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001334:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001336:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800133a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800133e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001342:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001346:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001348:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800134a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800134c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001350:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001354:	e017      	b.n	8001386 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001356:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800135a:	d011      	beq.n	8001380 <HAL_TIM_ConfigClockSource+0xca>
 800135c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001360:	d1c7      	bne.n	80012f2 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001362:	688a      	ldr	r2, [r1, #8]
 8001364:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001366:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001368:	68c9      	ldr	r1, [r1, #12]
 800136a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800136c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001370:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001374:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001376:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800137e:	e002      	b.n	8001386 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	e7b3      	b.n	80012f2 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800138a:	688a      	ldr	r2, [r1, #8]
 800138c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800138e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001390:	68c9      	ldr	r1, [r1, #12]
 8001392:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001394:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001398:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800139c:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 800139e:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80013a0:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80013a2:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 80013a6:	e7ee      	b.n	8001386 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80013a8:	684c      	ldr	r4, [r1, #4]
 80013aa:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80013ac:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013ae:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80013b0:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013b4:	f025 0501 	bic.w	r5, r5, #1
 80013b8:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80013ba:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80013bc:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80013be:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80013c2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80013c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80013c8:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80013ca:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80013cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80013d0:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80013d4:	e7d7      	b.n	8001386 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80013d6:	684c      	ldr	r4, [r1, #4]
 80013d8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80013da:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013dc:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80013de:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013e2:	f025 0501 	bic.w	r5, r5, #1
 80013e6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80013e8:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80013ea:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80013ec:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80013f0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80013f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80013f6:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80013f8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80013fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80013fe:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001402:	e7c0      	b.n	8001386 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001404:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001406:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800140a:	f042 0207 	orr.w	r2, r2, #7
 800140e:	e7ba      	b.n	8001386 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001410:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001412:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001416:	f042 0217 	orr.w	r2, r2, #23
 800141a:	e7b4      	b.n	8001386 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800141c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800141e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001422:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001426:	e7ae      	b.n	8001386 <HAL_TIM_ConfigClockSource+0xd0>

08001428 <HAL_TIM_OC_DelayElapsedCallback>:
 8001428:	4770      	bx	lr

0800142a <HAL_TIM_IC_CaptureCallback>:
 800142a:	4770      	bx	lr

0800142c <HAL_TIM_PWM_PulseFinishedCallback>:
 800142c:	4770      	bx	lr

0800142e <HAL_TIM_TriggerCallback>:
 800142e:	4770      	bx	lr

08001430 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001430:	6803      	ldr	r3, [r0, #0]
{
 8001432:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001434:	691a      	ldr	r2, [r3, #16]
{
 8001436:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001438:	0791      	lsls	r1, r2, #30
 800143a:	d50e      	bpl.n	800145a <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	0792      	lsls	r2, r2, #30
 8001440:	d50b      	bpl.n	800145a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001442:	f06f 0202 	mvn.w	r2, #2
 8001446:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001448:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800144a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800144c:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800144e:	079b      	lsls	r3, r3, #30
 8001450:	d077      	beq.n	8001542 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001452:	f7ff ffea 	bl	800142a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001456:	2300      	movs	r3, #0
 8001458:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800145a:	6823      	ldr	r3, [r4, #0]
 800145c:	691a      	ldr	r2, [r3, #16]
 800145e:	0750      	lsls	r0, r2, #29
 8001460:	d510      	bpl.n	8001484 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	0751      	lsls	r1, r2, #29
 8001466:	d50d      	bpl.n	8001484 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001468:	f06f 0204 	mvn.w	r2, #4
 800146c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800146e:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001470:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001472:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001474:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001478:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800147a:	d068      	beq.n	800154e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800147c:	f7ff ffd5 	bl	800142a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001480:	2300      	movs	r3, #0
 8001482:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001484:	6823      	ldr	r3, [r4, #0]
 8001486:	691a      	ldr	r2, [r3, #16]
 8001488:	0712      	lsls	r2, r2, #28
 800148a:	d50f      	bpl.n	80014ac <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	0710      	lsls	r0, r2, #28
 8001490:	d50c      	bpl.n	80014ac <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001492:	f06f 0208 	mvn.w	r2, #8
 8001496:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001498:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800149a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800149c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800149e:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80014a0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80014a2:	d05a      	beq.n	800155a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80014a4:	f7ff ffc1 	bl	800142a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014a8:	2300      	movs	r3, #0
 80014aa:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80014ac:	6823      	ldr	r3, [r4, #0]
 80014ae:	691a      	ldr	r2, [r3, #16]
 80014b0:	06d2      	lsls	r2, r2, #27
 80014b2:	d510      	bpl.n	80014d6 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80014b4:	68da      	ldr	r2, [r3, #12]
 80014b6:	06d0      	lsls	r0, r2, #27
 80014b8:	d50d      	bpl.n	80014d6 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80014ba:	f06f 0210 	mvn.w	r2, #16
 80014be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80014c0:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014c2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80014c4:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014c6:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80014ca:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014cc:	d04b      	beq.n	8001566 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80014ce:	f7ff ffac 	bl	800142a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014d2:	2300      	movs	r3, #0
 80014d4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80014d6:	6823      	ldr	r3, [r4, #0]
 80014d8:	691a      	ldr	r2, [r3, #16]
 80014da:	07d1      	lsls	r1, r2, #31
 80014dc:	d508      	bpl.n	80014f0 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	07d2      	lsls	r2, r2, #31
 80014e2:	d505      	bpl.n	80014f0 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80014e4:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80014e8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80014ea:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80014ec:	f001 fa0c 	bl	8002908 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80014f0:	6823      	ldr	r3, [r4, #0]
 80014f2:	691a      	ldr	r2, [r3, #16]
 80014f4:	0610      	lsls	r0, r2, #24
 80014f6:	d508      	bpl.n	800150a <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80014f8:	68da      	ldr	r2, [r3, #12]
 80014fa:	0611      	lsls	r1, r2, #24
 80014fc:	d505      	bpl.n	800150a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80014fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001502:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001504:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001506:	f000 f8aa 	bl	800165e <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800150a:	6823      	ldr	r3, [r4, #0]
 800150c:	691a      	ldr	r2, [r3, #16]
 800150e:	0652      	lsls	r2, r2, #25
 8001510:	d508      	bpl.n	8001524 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001512:	68da      	ldr	r2, [r3, #12]
 8001514:	0650      	lsls	r0, r2, #25
 8001516:	d505      	bpl.n	8001524 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001518:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800151c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800151e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001520:	f7ff ff85 	bl	800142e <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	691a      	ldr	r2, [r3, #16]
 8001528:	0691      	lsls	r1, r2, #26
 800152a:	d522      	bpl.n	8001572 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	0692      	lsls	r2, r2, #26
 8001530:	d51f      	bpl.n	8001572 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001532:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001536:	4620      	mov	r0, r4
}
 8001538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800153c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800153e:	f000 b88d 	b.w	800165c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001542:	f7ff ff71 	bl	8001428 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001546:	4620      	mov	r0, r4
 8001548:	f7ff ff70 	bl	800142c <HAL_TIM_PWM_PulseFinishedCallback>
 800154c:	e783      	b.n	8001456 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800154e:	f7ff ff6b 	bl	8001428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001552:	4620      	mov	r0, r4
 8001554:	f7ff ff6a 	bl	800142c <HAL_TIM_PWM_PulseFinishedCallback>
 8001558:	e792      	b.n	8001480 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800155a:	f7ff ff65 	bl	8001428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800155e:	4620      	mov	r0, r4
 8001560:	f7ff ff64 	bl	800142c <HAL_TIM_PWM_PulseFinishedCallback>
 8001564:	e7a0      	b.n	80014a8 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001566:	f7ff ff5f 	bl	8001428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800156a:	4620      	mov	r0, r4
 800156c:	f7ff ff5e 	bl	800142c <HAL_TIM_PWM_PulseFinishedCallback>
 8001570:	e7af      	b.n	80014d2 <HAL_TIM_IRQHandler+0xa2>
 8001572:	bd10      	pop	{r4, pc}

08001574 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001574:	4a1a      	ldr	r2, [pc, #104]	; (80015e0 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001576:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001578:	4290      	cmp	r0, r2
 800157a:	d00a      	beq.n	8001592 <TIM_Base_SetConfig+0x1e>
 800157c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001580:	d007      	beq.n	8001592 <TIM_Base_SetConfig+0x1e>
 8001582:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001586:	4290      	cmp	r0, r2
 8001588:	d003      	beq.n	8001592 <TIM_Base_SetConfig+0x1e>
 800158a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800158e:	4290      	cmp	r0, r2
 8001590:	d115      	bne.n	80015be <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001592:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001598:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800159a:	4a11      	ldr	r2, [pc, #68]	; (80015e0 <TIM_Base_SetConfig+0x6c>)
 800159c:	4290      	cmp	r0, r2
 800159e:	d00a      	beq.n	80015b6 <TIM_Base_SetConfig+0x42>
 80015a0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80015a4:	d007      	beq.n	80015b6 <TIM_Base_SetConfig+0x42>
 80015a6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80015aa:	4290      	cmp	r0, r2
 80015ac:	d003      	beq.n	80015b6 <TIM_Base_SetConfig+0x42>
 80015ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015b2:	4290      	cmp	r0, r2
 80015b4:	d103      	bne.n	80015be <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015b6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80015b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015bc:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80015be:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80015c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80015c4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80015c6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80015c8:	688b      	ldr	r3, [r1, #8]
 80015ca:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80015cc:	680b      	ldr	r3, [r1, #0]
 80015ce:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <TIM_Base_SetConfig+0x6c>)
 80015d2:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80015d4:	bf04      	itt	eq
 80015d6:	690b      	ldreq	r3, [r1, #16]
 80015d8:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80015da:	2301      	movs	r3, #1
 80015dc:	6143      	str	r3, [r0, #20]
 80015de:	4770      	bx	lr
 80015e0:	40012c00 	.word	0x40012c00

080015e4 <HAL_TIM_Base_Init>:
{
 80015e4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80015e6:	4604      	mov	r4, r0
 80015e8:	b1a0      	cbz	r0, 8001614 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80015ea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80015ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015f2:	b91b      	cbnz	r3, 80015fc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80015f4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80015f8:	f001 fada 	bl	8002bb0 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80015fc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015fe:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001600:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001604:	1d21      	adds	r1, r4, #4
 8001606:	f7ff ffb5 	bl	8001574 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800160a:	2301      	movs	r3, #1
  return HAL_OK;
 800160c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800160e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001612:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001614:	2001      	movs	r0, #1
}
 8001616:	bd10      	pop	{r4, pc}

08001618 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001618:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800161c:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800161e:	2b01      	cmp	r3, #1
 8001620:	f04f 0302 	mov.w	r3, #2
 8001624:	d018      	beq.n	8001658 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001626:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800162a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800162c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800162e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001630:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001632:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001636:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	4322      	orrs	r2, r4
 800163c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001644:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	430a      	orrs	r2, r1
 800164a:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800164c:	2301      	movs	r3, #1
 800164e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001652:	2300      	movs	r3, #0
 8001654:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001658:	4618      	mov	r0, r3

  return HAL_OK;
}
 800165a:	bd10      	pop	{r4, pc}

0800165c <HAL_TIMEx_CommutationCallback>:
 800165c:	4770      	bx	lr

0800165e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800165e:	4770      	bx	lr

08001660 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001664:	6805      	ldr	r5, [r0, #0]
 8001666:	68c2      	ldr	r2, [r0, #12]
 8001668:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800166a:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800166c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001670:	4313      	orrs	r3, r2
 8001672:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001674:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8001676:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001678:	430b      	orrs	r3, r1
 800167a:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 800167c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001680:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001684:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001686:	4313      	orrs	r3, r2
 8001688:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800168a:	696b      	ldr	r3, [r5, #20]
 800168c:	6982      	ldr	r2, [r0, #24]
 800168e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001692:	4313      	orrs	r3, r2
 8001694:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001696:	4b40      	ldr	r3, [pc, #256]	; (8001798 <UART_SetConfig+0x138>)
{
 8001698:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 800169a:	429d      	cmp	r5, r3
 800169c:	f04f 0419 	mov.w	r4, #25
 80016a0:	d146      	bne.n	8001730 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80016a2:	f7ff fd75 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
 80016a6:	fb04 f300 	mul.w	r3, r4, r0
 80016aa:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80016ae:	f04f 0864 	mov.w	r8, #100	; 0x64
 80016b2:	00b6      	lsls	r6, r6, #2
 80016b4:	fbb3 f3f6 	udiv	r3, r3, r6
 80016b8:	fbb3 f3f8 	udiv	r3, r3, r8
 80016bc:	011e      	lsls	r6, r3, #4
 80016be:	f7ff fd67 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
 80016c2:	4360      	muls	r0, r4
 80016c4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	fbb0 f7f3 	udiv	r7, r0, r3
 80016ce:	f7ff fd5f 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
 80016d2:	4360      	muls	r0, r4
 80016d4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	fbb0 f3f3 	udiv	r3, r0, r3
 80016de:	fbb3 f3f8 	udiv	r3, r3, r8
 80016e2:	fb08 7313 	mls	r3, r8, r3, r7
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	3332      	adds	r3, #50	; 0x32
 80016ea:	fbb3 f3f8 	udiv	r3, r3, r8
 80016ee:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80016f2:	f7ff fd4d 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
 80016f6:	4360      	muls	r0, r4
 80016f8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80016fc:	0092      	lsls	r2, r2, #2
 80016fe:	fbb0 faf2 	udiv	sl, r0, r2
 8001702:	f7ff fd45 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001706:	4360      	muls	r0, r4
 8001708:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001712:	fbb3 f3f8 	udiv	r3, r3, r8
 8001716:	fb08 a313 	mls	r3, r8, r3, sl
 800171a:	011b      	lsls	r3, r3, #4
 800171c:	3332      	adds	r3, #50	; 0x32
 800171e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	433b      	orrs	r3, r7
 8001728:	4433      	add	r3, r6
 800172a:	60ab      	str	r3, [r5, #8]
 800172c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001730:	f7ff fd1e 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 8001734:	fb04 f300 	mul.w	r3, r4, r0
 8001738:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800173c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001740:	00b6      	lsls	r6, r6, #2
 8001742:	fbb3 f3f6 	udiv	r3, r3, r6
 8001746:	fbb3 f3f8 	udiv	r3, r3, r8
 800174a:	011e      	lsls	r6, r3, #4
 800174c:	f7ff fd10 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 8001750:	4360      	muls	r0, r4
 8001752:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	fbb0 f7f3 	udiv	r7, r0, r3
 800175c:	f7ff fd08 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 8001760:	4360      	muls	r0, r4
 8001762:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	fbb0 f3f3 	udiv	r3, r0, r3
 800176c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001770:	fb08 7313 	mls	r3, r8, r3, r7
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	3332      	adds	r3, #50	; 0x32
 8001778:	fbb3 f3f8 	udiv	r3, r3, r8
 800177c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001780:	f7ff fcf6 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 8001784:	4360      	muls	r0, r4
 8001786:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800178a:	0092      	lsls	r2, r2, #2
 800178c:	fbb0 faf2 	udiv	sl, r0, r2
 8001790:	f7ff fcee 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 8001794:	e7b7      	b.n	8001706 <UART_SetConfig+0xa6>
 8001796:	bf00      	nop
 8001798:	40013800 	.word	0x40013800

0800179c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800179c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800179e:	4604      	mov	r4, r0
 80017a0:	460e      	mov	r6, r1
 80017a2:	4617      	mov	r7, r2
 80017a4:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80017a6:	6821      	ldr	r1, [r4, #0]
 80017a8:	680b      	ldr	r3, [r1, #0]
 80017aa:	ea36 0303 	bics.w	r3, r6, r3
 80017ae:	d101      	bne.n	80017b4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80017b0:	2000      	movs	r0, #0
}
 80017b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80017b4:	1c6b      	adds	r3, r5, #1
 80017b6:	d0f7      	beq.n	80017a8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80017b8:	b995      	cbnz	r5, 80017e0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80017ba:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80017bc:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80017be:	68da      	ldr	r2, [r3, #12]
 80017c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80017c4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017c6:	695a      	ldr	r2, [r3, #20]
 80017c8:	f022 0201 	bic.w	r2, r2, #1
 80017cc:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80017ce:	2320      	movs	r3, #32
 80017d0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80017d4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80017d8:	2300      	movs	r3, #0
 80017da:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80017de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80017e0:	f7fe fcf6 	bl	80001d0 <HAL_GetTick>
 80017e4:	1bc0      	subs	r0, r0, r7
 80017e6:	4285      	cmp	r5, r0
 80017e8:	d2dd      	bcs.n	80017a6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80017ea:	e7e6      	b.n	80017ba <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080017ec <HAL_UART_Init>:
{
 80017ec:	b510      	push	{r4, lr}
  if(huart == NULL)
 80017ee:	4604      	mov	r4, r0
 80017f0:	b340      	cbz	r0, 8001844 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80017f2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80017f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017fa:	b91b      	cbnz	r3, 8001804 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80017fc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001800:	f001 f9f2 	bl	8002be8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001804:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001806:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001808:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800180c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800180e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001810:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001814:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001816:	f7ff ff23 	bl	8001660 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800181a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800181c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800181e:	691a      	ldr	r2, [r3, #16]
 8001820:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001824:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001826:	695a      	ldr	r2, [r3, #20]
 8001828:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800182c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001834:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001836:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001838:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800183a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800183e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001842:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001844:	2001      	movs	r0, #1
}
 8001846:	bd10      	pop	{r4, pc}

08001848 <HAL_UART_Transmit>:
{
 8001848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800184c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800184e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001852:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8001854:	2b20      	cmp	r3, #32
{
 8001856:	460d      	mov	r5, r1
 8001858:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800185a:	d14e      	bne.n	80018fa <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 800185c:	2900      	cmp	r1, #0
 800185e:	d049      	beq.n	80018f4 <HAL_UART_Transmit+0xac>
 8001860:	2a00      	cmp	r2, #0
 8001862:	d047      	beq.n	80018f4 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001864:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001868:	2b01      	cmp	r3, #1
 800186a:	d046      	beq.n	80018fa <HAL_UART_Transmit+0xb2>
 800186c:	2301      	movs	r3, #1
 800186e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001872:	2300      	movs	r3, #0
 8001874:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001876:	2321      	movs	r3, #33	; 0x21
 8001878:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800187c:	f7fe fca8 	bl	80001d0 <HAL_GetTick>
 8001880:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001882:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001886:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800188a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800188c:	b29b      	uxth	r3, r3
 800188e:	b96b      	cbnz	r3, 80018ac <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001890:	463b      	mov	r3, r7
 8001892:	4632      	mov	r2, r6
 8001894:	2140      	movs	r1, #64	; 0x40
 8001896:	4620      	mov	r0, r4
 8001898:	f7ff ff80 	bl	800179c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800189c:	b9a8      	cbnz	r0, 80018ca <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 800189e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80018a0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80018a4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80018a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80018ac:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018ae:	4632      	mov	r2, r6
      huart->TxXferCount--;
 80018b0:	3b01      	subs	r3, #1
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80018b6:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018b8:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80018ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018be:	4620      	mov	r0, r4
 80018c0:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80018c2:	d10e      	bne.n	80018e2 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018c4:	f7ff ff6a 	bl	800179c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80018c8:	b110      	cbz	r0, 80018d0 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 80018ca:	2003      	movs	r0, #3
 80018cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80018d0:	882b      	ldrh	r3, [r5, #0]
 80018d2:	6822      	ldr	r2, [r4, #0]
 80018d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018d8:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80018da:	6923      	ldr	r3, [r4, #16]
 80018dc:	b943      	cbnz	r3, 80018f0 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 80018de:	3502      	adds	r5, #2
 80018e0:	e7d3      	b.n	800188a <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018e2:	f7ff ff5b 	bl	800179c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80018e6:	2800      	cmp	r0, #0
 80018e8:	d1ef      	bne.n	80018ca <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80018ea:	6823      	ldr	r3, [r4, #0]
 80018ec:	782a      	ldrb	r2, [r5, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	3501      	adds	r5, #1
 80018f2:	e7ca      	b.n	800188a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80018f4:	2001      	movs	r0, #1
 80018f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80018fa:	2002      	movs	r0, #2
}
 80018fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001900 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001900:	b084      	sub	sp, #16
 8001902:	a801      	add	r0, sp, #4
 8001904:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001908:	b004      	add	sp, #16
 800190a:	2000      	movs	r0, #0
 800190c:	4770      	bx	lr

0800190e <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800190e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001912:	b29b      	uxth	r3, r3
 8001914:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001918:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 800191c:	2000      	movs	r0, #0
 800191e:	4770      	bx	lr

08001920 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001920:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001924:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8001928:	045b      	lsls	r3, r3, #17
 800192a:	0c5b      	lsrs	r3, r3, #17
 800192c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001930:	2000      	movs	r0, #0
 8001932:	4770      	bx	lr

08001934 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001934:	2000      	movs	r0, #0
 8001936:	4770      	bx	lr

08001938 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001938:	b084      	sub	sp, #16
 800193a:	b510      	push	{r4, lr}
 800193c:	ac03      	add	r4, sp, #12
 800193e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 8001942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 8001946:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8001948:	2301      	movs	r3, #1
 800194a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 800194e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 8001952:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8001956:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 800195a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 800195e:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8001960:	b29b      	uxth	r3, r3
 8001962:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001966:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 800196a:	4610      	mov	r0, r2
 800196c:	4770      	bx	lr
	...

08001970 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001970:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 8001972:	78cb      	ldrb	r3, [r1, #3]
 8001974:	780a      	ldrb	r2, [r1, #0]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d80f      	bhi.n	800199a <USB_ActivateEndpoint+0x2a>
 800197a:	e8df f003 	tbb	[pc, r3]
 800197e:	6402      	.short	0x6402
 8001980:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8001982:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001986:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800198a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800198e:	041b      	lsls	r3, r3, #16
 8001990:	0c1b      	lsrs	r3, r3, #16
 8001992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001996:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800199a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800199e:	780c      	ldrb	r4, [r1, #0]
 80019a0:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80019a4:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 80019a8:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80019ac:	401a      	ands	r2, r3
 80019ae:	432a      	orrs	r2, r5
 80019b0:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 80019b4:	7a8a      	ldrb	r2, [r1, #10]
 80019b6:	780d      	ldrb	r5, [r1, #0]
 80019b8:	2a00      	cmp	r2, #0
 80019ba:	f040 8097 	bne.w	8001aec <USB_ActivateEndpoint+0x17c>
  {
    if (ep->is_in)
 80019be:	784c      	ldrb	r4, [r1, #1]
 80019c0:	888a      	ldrh	r2, [r1, #4]
 80019c2:	2c00      	cmp	r4, #0
 80019c4:	d04a      	beq.n	8001a5c <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80019c6:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 80019ca:	0852      	lsrs	r2, r2, #1
 80019cc:	b2a4      	uxth	r4, r4
 80019ce:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80019d2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80019d6:	0052      	lsls	r2, r2, #1
 80019d8:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80019dc:	780c      	ldrb	r4, [r1, #0]
 80019de:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80019e2:	0652      	lsls	r2, r2, #25
 80019e4:	d508      	bpl.n	80019f8 <USB_ActivateEndpoint+0x88>
 80019e6:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80019ea:	4013      	ands	r3, r2
 80019ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80019f4:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 80019f8:	780a      	ldrb	r2, [r1, #0]
 80019fa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a06:	041b      	lsls	r3, r3, #16
 8001a08:	0c1b      	lsrs	r3, r3, #16
 8001a0a:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a16:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8001a1e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a22:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a2a:	041b      	lsls	r3, r3, #16
 8001a2c:	0c1b      	lsrs	r3, r3, #16
 8001a2e:	e7b2      	b.n	8001996 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8001a30:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a34:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a3c:	041b      	lsls	r3, r3, #16
 8001a3e:	0c1b      	lsrs	r3, r3, #16
 8001a40:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001a44:	e7a7      	b.n	8001996 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001a46:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a4a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a52:	041b      	lsls	r3, r3, #16
 8001a54:	0c1b      	lsrs	r3, r3, #16
 8001a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a5a:	e79c      	b.n	8001996 <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001a5c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001a60:	0852      	lsrs	r2, r2, #1
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	3304      	adds	r3, #4
 8001a66:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8001a6a:	0052      	lsls	r2, r2, #1
 8001a6c:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8001a70:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001a74:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001a78:	690d      	ldr	r5, [r1, #16]
 8001a7a:	b292      	uxth	r2, r2
 8001a7c:	780b      	ldrb	r3, [r1, #0]
 8001a7e:	3206      	adds	r2, #6
 8001a80:	2d3e      	cmp	r5, #62	; 0x3e
 8001a82:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001a86:	d929      	bls.n	8001adc <USB_ActivateEndpoint+0x16c>
 8001a88:	f3c5 164f 	ubfx	r6, r5, #5, #16
 8001a8c:	06eb      	lsls	r3, r5, #27
 8001a8e:	bf04      	itt	eq
 8001a90:	f106 33ff 	addeq.w	r3, r6, #4294967295
 8001a94:	b29e      	uxtheq	r6, r3
 8001a96:	4b6e      	ldr	r3, [pc, #440]	; (8001c50 <USB_ActivateEndpoint+0x2e0>)
 8001a98:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001aa2:	780a      	ldrb	r2, [r1, #0]
 8001aa4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001aa8:	045e      	lsls	r6, r3, #17
 8001aaa:	d50b      	bpl.n	8001ac4 <USB_ActivateEndpoint+0x154>
 8001aac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ab0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ab4:	051b      	lsls	r3, r3, #20
 8001ab6:	0d1b      	lsrs	r3, r3, #20
 8001ab8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001ac4:	780a      	ldrb	r2, [r1, #0]
 8001ac6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001aca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ad2:	041b      	lsls	r3, r3, #16
 8001ad4:	0c1b      	lsrs	r3, r3, #16
 8001ad6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001ada:	e798      	b.n	8001a0e <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001adc:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8001ae0:	07ed      	lsls	r5, r5, #31
 8001ae2:	bf44      	itt	mi
 8001ae4:	3301      	addmi	r3, #1
 8001ae6:	b29b      	uxthmi	r3, r3
 8001ae8:	029b      	lsls	r3, r3, #10
 8001aea:	e7d7      	b.n	8001a9c <USB_ActivateEndpoint+0x12c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8001aec:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 8001af0:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8001af4:	0512      	lsls	r2, r2, #20
 8001af6:	0d12      	lsrs	r2, r2, #20
 8001af8:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8001afc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b00:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8001b04:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001b08:	780c      	ldrb	r4, [r1, #0]
 8001b0a:	b292      	uxth	r2, r2
 8001b0c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001b10:	88cc      	ldrh	r4, [r1, #6]
 8001b12:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8001b16:	0864      	lsrs	r4, r4, #1
 8001b18:	0064      	lsls	r4, r4, #1
 8001b1a:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 8001b1e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001b22:	780c      	ldrb	r4, [r1, #0]
 8001b24:	b292      	uxth	r2, r2
 8001b26:	3204      	adds	r2, #4
 8001b28:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001b2c:	890c      	ldrh	r4, [r1, #8]
 8001b2e:	0864      	lsrs	r4, r4, #1
 8001b30:	0064      	lsls	r4, r4, #1
 8001b32:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 8001b36:	784a      	ldrb	r2, [r1, #1]
 8001b38:	780c      	ldrb	r4, [r1, #0]
 8001b3a:	2a00      	cmp	r2, #0
 8001b3c:	d147      	bne.n	8001bce <USB_ActivateEndpoint+0x25e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001b3e:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001b42:	0455      	lsls	r5, r2, #17
 8001b44:	d508      	bpl.n	8001b58 <USB_ActivateEndpoint+0x1e8>
 8001b46:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b54:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001b58:	780a      	ldrb	r2, [r1, #0]
 8001b5a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b5e:	065c      	lsls	r4, r3, #25
 8001b60:	d50b      	bpl.n	8001b7a <USB_ActivateEndpoint+0x20a>
 8001b62:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b6a:	051b      	lsls	r3, r3, #20
 8001b6c:	0d1b      	lsrs	r3, r3, #20
 8001b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b76:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001b7a:	780a      	ldrb	r2, [r1, #0]
 8001b7c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b84:	051b      	lsls	r3, r3, #20
 8001b86:	0d1b      	lsrs	r3, r3, #20
 8001b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b90:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001b94:	f248 0280 	movw	r2, #32896	; 0x8080
 8001b98:	780c      	ldrb	r4, [r1, #0]
 8001b9a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ba6:	041b      	lsls	r3, r3, #16
 8001ba8:	0c1b      	lsrs	r3, r3, #16
 8001baa:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001bb4:	7809      	ldrb	r1, [r1, #0]
 8001bb6:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001bc2:	041b      	lsls	r3, r3, #16
 8001bc4:	0c1b      	lsrs	r3, r3, #16
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8001bcc:	e725      	b.n	8001a1a <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001bce:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001bd2:	0452      	lsls	r2, r2, #17
 8001bd4:	d508      	bpl.n	8001be8 <USB_ActivateEndpoint+0x278>
 8001bd6:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be4:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001be8:	780a      	ldrb	r2, [r1, #0]
 8001bea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bee:	065b      	lsls	r3, r3, #25
 8001bf0:	d50b      	bpl.n	8001c0a <USB_ActivateEndpoint+0x29a>
 8001bf2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bfa:	051b      	lsls	r3, r3, #20
 8001bfc:	0d1b      	lsrs	r3, r3, #20
 8001bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c06:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001c0a:	780a      	ldrb	r2, [r1, #0]
 8001c0c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c14:	051b      	lsls	r3, r3, #20
 8001c16:	0d1b      	lsrs	r3, r3, #20
 8001c18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c20:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001c24:	f248 0280 	movw	r2, #32896	; 0x8080
 8001c28:	780c      	ldrb	r4, [r1, #0]
 8001c2a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c36:	041b      	lsls	r3, r3, #16
 8001c38:	0c1b      	lsrs	r3, r3, #16
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001c40:	7809      	ldrb	r1, [r1, #0]
 8001c42:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001c46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c4e:	e7b8      	b.n	8001bc2 <USB_ActivateEndpoint+0x252>
 8001c50:	ffff8000 	.word	0xffff8000

08001c54 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001c54:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 8001c56:	7a8c      	ldrb	r4, [r1, #10]
 8001c58:	784a      	ldrb	r2, [r1, #1]
 8001c5a:	780b      	ldrb	r3, [r1, #0]
 8001c5c:	bbcc      	cbnz	r4, 8001cd2 <USB_DeactivateEndpoint+0x7e>
  {
    if (ep->is_in)
 8001c5e:	b302      	cbz	r2, 8001ca2 <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001c60:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001c64:	0652      	lsls	r2, r2, #25
 8001c66:	d50b      	bpl.n	8001c80 <USB_DeactivateEndpoint+0x2c>
 8001c68:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001c6c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c70:	0512      	lsls	r2, r2, #20
 8001c72:	0d12      	lsrs	r2, r2, #20
 8001c74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c78:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001c7c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8001c80:	780a      	ldrb	r2, [r1, #0]
 8001c82:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001c8e:	041b      	lsls	r3, r3, #16
 8001c90:	0c1b      	lsrs	r3, r3, #16
 8001c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c9a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001ca2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001ca6:	0454      	lsls	r4, r2, #17
 8001ca8:	d50b      	bpl.n	8001cc2 <USB_DeactivateEndpoint+0x6e>
 8001caa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001cae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001cb2:	0512      	lsls	r2, r2, #20
 8001cb4:	0d12      	lsrs	r2, r2, #20
 8001cb6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001cba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cbe:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001cc2:	780a      	ldrb	r2, [r1, #0]
 8001cc4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001cc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cd0:	e7dd      	b.n	8001c8e <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in==0)
 8001cd2:	2a00      	cmp	r2, #0
 8001cd4:	d148      	bne.n	8001d68 <USB_DeactivateEndpoint+0x114>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001cd6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001cda:	0452      	lsls	r2, r2, #17
 8001cdc:	d50b      	bpl.n	8001cf6 <USB_DeactivateEndpoint+0xa2>
 8001cde:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001ce2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ce6:	0512      	lsls	r2, r2, #20
 8001ce8:	0d12      	lsrs	r2, r2, #20
 8001cea:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001cee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cf2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001cf6:	780a      	ldrb	r2, [r1, #0]
 8001cf8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001cfc:	065c      	lsls	r4, r3, #25
 8001cfe:	d50b      	bpl.n	8001d18 <USB_DeactivateEndpoint+0xc4>
 8001d00:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d08:	051b      	lsls	r3, r3, #20
 8001d0a:	0d1b      	lsrs	r3, r3, #20
 8001d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d14:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001d18:	780a      	ldrb	r2, [r1, #0]
 8001d1a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d22:	051b      	lsls	r3, r3, #20
 8001d24:	0d1b      	lsrs	r3, r3, #20
 8001d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d2e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001d32:	f248 0280 	movw	r2, #32896	; 0x8080
 8001d36:	780c      	ldrb	r4, [r1, #0]
 8001d38:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001d3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d44:	041b      	lsls	r3, r3, #16
 8001d46:	0c1b      	lsrs	r3, r3, #16
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001d4e:	7809      	ldrb	r1, [r1, #0]
 8001d50:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001d54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001d5c:	041b      	lsls	r3, r3, #16
 8001d5e:	0c1b      	lsrs	r3, r3, #16
 8001d60:	4313      	orrs	r3, r2
 8001d62:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8001d66:	e79a      	b.n	8001c9e <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001d68:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001d6c:	0452      	lsls	r2, r2, #17
 8001d6e:	d50b      	bpl.n	8001d88 <USB_DeactivateEndpoint+0x134>
 8001d70:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001d74:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d78:	0512      	lsls	r2, r2, #20
 8001d7a:	0d12      	lsrs	r2, r2, #20
 8001d7c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001d80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d84:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001d88:	780a      	ldrb	r2, [r1, #0]
 8001d8a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d8e:	065b      	lsls	r3, r3, #25
 8001d90:	d50b      	bpl.n	8001daa <USB_DeactivateEndpoint+0x156>
 8001d92:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d9a:	051b      	lsls	r3, r3, #20
 8001d9c:	0d1b      	lsrs	r3, r3, #20
 8001d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001da6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001daa:	780a      	ldrb	r2, [r1, #0]
 8001dac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001db0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001db4:	051b      	lsls	r3, r3, #20
 8001db6:	0d1b      	lsrs	r3, r3, #20
 8001db8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001dc4:	f248 0280 	movw	r2, #32896	; 0x8080
 8001dc8:	780c      	ldrb	r4, [r1, #0]
 8001dca:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dd6:	041b      	lsls	r3, r3, #16
 8001dd8:	0c1b      	lsrs	r3, r3, #16
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001de0:	7809      	ldrb	r1, [r1, #0]
 8001de2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001de6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dee:	e7b5      	b.n	8001d5c <USB_DeactivateEndpoint+0x108>

08001df0 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8001df0:	780a      	ldrb	r2, [r1, #0]
 8001df2:	b98a      	cbnz	r2, 8001e18 <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8001df4:	8803      	ldrh	r3, [r0, #0]
 8001df6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dfe:	041b      	lsls	r3, r3, #16
 8001e00:	0c1b      	lsrs	r3, r3, #16
 8001e02:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e06:	f083 0310 	eor.w	r3, r3, #16
 8001e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e12:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8001e14:	2000      	movs	r0, #0
 8001e16:	4770      	bx	lr
    if (ep->is_in)
 8001e18:	784b      	ldrb	r3, [r1, #1]
 8001e1a:	b183      	cbz	r3, 8001e3e <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8001e1c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e28:	041b      	lsls	r3, r3, #16
 8001e2a:	0c1b      	lsrs	r3, r3, #16
 8001e2c:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8001e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e38:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001e3c:	e7ea      	b.n	8001e14 <USB_EPSetStall+0x24>
 8001e3e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e4a:	041b      	lsls	r3, r3, #16
 8001e4c:	0c1b      	lsrs	r3, r3, #16
 8001e4e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e52:	e7ed      	b.n	8001e30 <USB_EPSetStall+0x40>

08001e54 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8001e54:	784b      	ldrb	r3, [r1, #1]
 8001e56:	780a      	ldrb	r2, [r1, #0]
 8001e58:	b313      	cbz	r3, 8001ea0 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001e5a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e5e:	065b      	lsls	r3, r3, #25
 8001e60:	d50b      	bpl.n	8001e7a <USB_EPClearStall+0x26>
 8001e62:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e6a:	051b      	lsls	r3, r3, #20
 8001e6c:	0d1b      	lsrs	r3, r3, #20
 8001e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e76:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001e7a:	780a      	ldrb	r2, [r1, #0]
 8001e7c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e88:	041b      	lsls	r3, r3, #16
 8001e8a:	0c1b      	lsrs	r3, r3, #16
 8001e8c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e98:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001ea0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ea4:	045b      	lsls	r3, r3, #17
 8001ea6:	d50b      	bpl.n	8001ec0 <USB_EPClearStall+0x6c>
 8001ea8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001eac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eb0:	051b      	lsls	r3, r3, #20
 8001eb2:	0d1b      	lsrs	r3, r3, #20
 8001eb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ebc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001ec0:	780a      	ldrb	r2, [r1, #0]
 8001ec2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ec6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ece:	041b      	lsls	r3, r3, #16
 8001ed0:	0c1b      	lsrs	r3, r3, #16
 8001ed2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001ed6:	e7db      	b.n	8001e90 <USB_EPClearStall+0x3c>

08001ed8 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8001ed8:	b911      	cbnz	r1, 8001ee0 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	4770      	bx	lr

08001ee4 <USB_DevConnect>:
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	4770      	bx	lr

08001ee8 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001ee8:	2000      	movs	r0, #0
 8001eea:	4770      	bx	lr

08001eec <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8001eec:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8001ef0:	b280      	uxth	r0, r0
 8001ef2:	4770      	bx	lr

08001ef4 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	4770      	bx	lr

08001ef8 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001ef8:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8001efa:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001efc:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001efe:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001f02:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001f04:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8001f08:	42a3      	cmp	r3, r4
 8001f0a:	d100      	bne.n	8001f0e <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8001f0c:	bd10      	pop	{r4, pc}
 8001f0e:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 8001f12:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8001f16:	3401      	adds	r4, #1
 8001f18:	e7f6      	b.n	8001f08 <USB_WritePMA+0x10>
	...

08001f1c <USB_EPStartXfer>:
{
 8001f1c:	b570      	push	{r4, r5, r6, lr}
 8001f1e:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 8001f20:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 8001f22:	7849      	ldrb	r1, [r1, #1]
{
 8001f24:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 8001f26:	2901      	cmp	r1, #1
 8001f28:	6933      	ldr	r3, [r6, #16]
 8001f2a:	7ab0      	ldrb	r0, [r6, #10]
 8001f2c:	d166      	bne.n	8001ffc <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	461c      	mov	r4, r3
      ep->xfer_len =0;
 8001f32:	bf9b      	ittet	ls
 8001f34:	2300      	movls	r3, #0
 8001f36:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 8001f38:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 8001f3a:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 8001f3c:	bf88      	it	hi
 8001f3e:	61b2      	strhi	r2, [r6, #24]
 8001f40:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 8001f42:	bb10      	cbnz	r0, 8001f8a <USB_EPStartXfer+0x6e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8001f44:	88b2      	ldrh	r2, [r6, #4]
 8001f46:	6971      	ldr	r1, [r6, #20]
 8001f48:	4628      	mov	r0, r5
 8001f4a:	f7ff ffd5 	bl	8001ef8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8001f4e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8001f52:	7832      	ldrb	r2, [r6, #0]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3302      	adds	r3, #2
 8001f58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001f5c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8001f60:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001f64:	7832      	ldrb	r2, [r6, #0]
 8001f66:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f72:	041b      	lsls	r3, r3, #16
 8001f74:	0c1b      	lsrs	r3, r3, #16
 8001f76:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f82:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8001f86:	2000      	movs	r0, #0
 8001f88:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001f8a:	7832      	ldrb	r2, [r6, #0]
 8001f8c:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 8001f90:	00d2      	lsls	r2, r2, #3
 8001f92:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001f96:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001f9a:	b289      	uxth	r1, r1
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001f9c:	d01a      	beq.n	8001fd4 <USB_EPStartXfer+0xb8>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001f9e:	3102      	adds	r1, #2
 8001fa0:	440a      	add	r2, r1
 8001fa2:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001fa6:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 8001faa:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001fac:	6971      	ldr	r1, [r6, #20]
 8001fae:	4628      	mov	r0, r5
 8001fb0:	f7ff ffa2 	bl	8001ef8 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001fb4:	7873      	ldrb	r3, [r6, #1]
 8001fb6:	7832      	ldrb	r2, [r6, #0]
 8001fb8:	b99b      	cbnz	r3, 8001fe2 <USB_EPStartXfer+0xc6>
 8001fba:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001fbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fc2:	051b      	lsls	r3, r3, #20
 8001fc4:	0d1b      	lsrs	r3, r3, #20
 8001fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fce:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8001fd2:	e7c7      	b.n	8001f64 <USB_EPStartXfer+0x48>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001fd4:	440a      	add	r2, r1
 8001fd6:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001fda:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 8001fde:	88f2      	ldrh	r2, [r6, #6]
 8001fe0:	e7e4      	b.n	8001fac <USB_EPStartXfer+0x90>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d1be      	bne.n	8001f64 <USB_EPStartXfer+0x48>
 8001fe6:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001fea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fee:	051b      	lsls	r3, r3, #20
 8001ff0:	0d1b      	lsrs	r3, r3, #20
 8001ff2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ffa:	e7e8      	b.n	8001fce <USB_EPStartXfer+0xb2>
    if (ep->xfer_len > ep->maxpacket)
 8001ffc:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 8001ffe:	bf93      	iteet	ls
 8002000:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 8002002:	1ad2      	subhi	r2, r2, r3
 8002004:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 8002006:	61b3      	strls	r3, [r6, #24]
 8002008:	bf98      	it	ls
 800200a:	4613      	movls	r3, r2
 800200c:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 800200e:	bb70      	cbnz	r0, 800206e <USB_EPStartXfer+0x152>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002010:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002014:	2b3e      	cmp	r3, #62	; 0x3e
 8002016:	b289      	uxth	r1, r1
 8002018:	f101 0106 	add.w	r1, r1, #6
 800201c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8002020:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8002024:	d918      	bls.n	8002058 <USB_EPStartXfer+0x13c>
 8002026:	f3c3 124f 	ubfx	r2, r3, #5, #16
 800202a:	06db      	lsls	r3, r3, #27
 800202c:	bf04      	itt	eq
 800202e:	f102 33ff 	addeq.w	r3, r2, #4294967295
 8002032:	b29a      	uxtheq	r2, r3
 8002034:	4b38      	ldr	r3, [pc, #224]	; (8002118 <USB_EPStartXfer+0x1fc>)
 8002036:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800203a:	b29b      	uxth	r3, r3
 800203c:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002040:	7832      	ldrb	r2, [r6, #0]
 8002042:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002046:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800204a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204e:	041b      	lsls	r3, r3, #16
 8002050:	0c1b      	lsrs	r3, r3, #16
 8002052:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002056:	e790      	b.n	8001f7a <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002058:	f3c3 024f 	ubfx	r2, r3, #1, #16
 800205c:	07dc      	lsls	r4, r3, #31
 800205e:	bf44      	itt	mi
 8002060:	3201      	addmi	r2, #1
 8002062:	b292      	uxthmi	r2, r2
 8002064:	0292      	lsls	r2, r2, #10
 8002066:	b292      	uxth	r2, r2
 8002068:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 800206c:	e7e8      	b.n	8002040 <USB_EPStartXfer+0x124>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800206e:	b9b9      	cbnz	r1, 80020a0 <USB_EPStartXfer+0x184>
 8002070:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002074:	2b3e      	cmp	r3, #62	; 0x3e
 8002076:	b289      	uxth	r1, r1
 8002078:	f101 0102 	add.w	r1, r1, #2
 800207c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8002080:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 8002084:	d928      	bls.n	80020d8 <USB_EPStartXfer+0x1bc>
 8002086:	f3c3 104f 	ubfx	r0, r3, #5, #16
 800208a:	06da      	lsls	r2, r3, #27
 800208c:	bf04      	itt	eq
 800208e:	f100 32ff 	addeq.w	r2, r0, #4294967295
 8002092:	b290      	uxtheq	r0, r2
 8002094:	4a20      	ldr	r2, [pc, #128]	; (8002118 <USB_EPStartXfer+0x1fc>)
 8002096:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800209a:	b292      	uxth	r2, r2
 800209c:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 80020a0:	7872      	ldrb	r2, [r6, #1]
 80020a2:	7831      	ldrb	r1, [r6, #0]
 80020a4:	bb5a      	cbnz	r2, 80020fe <USB_EPStartXfer+0x1e2>
 80020a6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80020aa:	2b3e      	cmp	r3, #62	; 0x3e
 80020ac:	b292      	uxth	r2, r2
 80020ae:	f102 0206 	add.w	r2, r2, #6
 80020b2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80020b6:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 80020ba:	d915      	bls.n	80020e8 <USB_EPStartXfer+0x1cc>
 80020bc:	f3c3 114f 	ubfx	r1, r3, #5, #16
 80020c0:	06dc      	lsls	r4, r3, #27
 80020c2:	bf04      	itt	eq
 80020c4:	f101 33ff 	addeq.w	r3, r1, #4294967295
 80020c8:	b299      	uxtheq	r1, r3
 80020ca:	4b13      	ldr	r3, [pc, #76]	; (8002118 <USB_EPStartXfer+0x1fc>)
 80020cc:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 80020d6:	e7b3      	b.n	8002040 <USB_EPStartXfer+0x124>
 80020d8:	f3c3 024f 	ubfx	r2, r3, #1, #16
 80020dc:	07d8      	lsls	r0, r3, #31
 80020de:	bf44      	itt	mi
 80020e0:	3201      	addmi	r2, #1
 80020e2:	b292      	uxthmi	r2, r2
 80020e4:	0292      	lsls	r2, r2, #10
 80020e6:	e7d8      	b.n	800209a <USB_EPStartXfer+0x17e>
 80020e8:	f3c3 014f 	ubfx	r1, r3, #1, #16
 80020ec:	07db      	lsls	r3, r3, #31
 80020ee:	bf44      	itt	mi
 80020f0:	3101      	addmi	r1, #1
 80020f2:	b289      	uxthmi	r1, r1
 80020f4:	0289      	lsls	r1, r1, #10
 80020f6:	b289      	uxth	r1, r1
 80020f8:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
 80020fc:	e7a0      	b.n	8002040 <USB_EPStartXfer+0x124>
 80020fe:	2a01      	cmp	r2, #1
 8002100:	d19e      	bne.n	8002040 <USB_EPStartXfer+0x124>
 8002102:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002106:	b292      	uxth	r2, r2
 8002108:	3202      	adds	r2, #2
 800210a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800210e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8002112:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8002116:	e793      	b.n	8002040 <USB_EPStartXfer+0x124>
 8002118:	ffff8000 	.word	0xffff8000

0800211c <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800211c:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 800211e:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002120:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002122:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002126:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002128:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 800212c:	42a3      	cmp	r3, r4
 800212e:	d100      	bne.n	8002132 <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8002130:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002132:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8002136:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 800213a:	3401      	adds	r4, #1
 800213c:	e7f6      	b.n	800212c <USB_ReadPMA+0x10>
	...

08002140 <USBD_HID_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_CfgDesc);
 8002140:	2322      	movs	r3, #34	; 0x22
 8002142:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgDesc;
}
 8002144:	4800      	ldr	r0, [pc, #0]	; (8002148 <USBD_HID_GetCfgDesc+0x8>)
 8002146:	4770      	bx	lr
 8002148:	2000008c 	.word	0x2000008c

0800214c <USBD_HID_DataIn>:
                              uint8_t epnum)
{
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800214c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8002150:	2000      	movs	r0, #0
 8002152:	7318      	strb	r0, [r3, #12]
  return USBD_OK;
}
 8002154:	4770      	bx	lr
	...

08002158 <USBD_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 8002158:	230a      	movs	r3, #10
 800215a:	8003      	strh	r3, [r0, #0]
  return USBD_HID_DeviceQualifierDesc;
}
 800215c:	4800      	ldr	r0, [pc, #0]	; (8002160 <USBD_HID_GetDeviceQualifierDesc+0x8>)
 800215e:	4770      	bx	lr
 8002160:	200000bc 	.word	0x200000bc

08002164 <USBD_HID_Setup>:
{
 8002164:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002166:	780c      	ldrb	r4, [r1, #0]
{
 8002168:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800216a:	f014 0460 	ands.w	r4, r4, #96	; 0x60
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 800216e:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002172:	d023      	beq.n	80021bc <USBD_HID_Setup+0x58>
 8002174:	2c20      	cmp	r4, #32
 8002176:	d10c      	bne.n	8002192 <USBD_HID_Setup+0x2e>
    switch (req->bRequest)
 8002178:	784a      	ldrb	r2, [r1, #1]
 800217a:	3a02      	subs	r2, #2
 800217c:	2a09      	cmp	r2, #9
 800217e:	d817      	bhi.n	80021b0 <USBD_HID_Setup+0x4c>
 8002180:	e8df f002 	tbb	[pc, r2]
 8002184:	16160913 	.word	0x16160913
 8002188:	16161616 	.word	0x16161616
 800218c:	050f      	.short	0x050f
      hhid->Protocol = (uint8_t)(req->wValue);
 800218e:	788a      	ldrb	r2, [r1, #2]
 8002190:	601a      	str	r2, [r3, #0]
  return USBD_OK;
 8002192:	2400      	movs	r4, #0
 8002194:	e010      	b.n	80021b8 <USBD_HID_Setup+0x54>
      USBD_CtlSendData (pdev, 
 8002196:	2201      	movs	r2, #1
 8002198:	4619      	mov	r1, r3
      USBD_CtlSendData (pdev, 
 800219a:	4628      	mov	r0, r5
 800219c:	f000 fb34 	bl	8002808 <USBD_CtlSendData>
 80021a0:	e7f7      	b.n	8002192 <USBD_HID_Setup+0x2e>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80021a2:	884a      	ldrh	r2, [r1, #2]
 80021a4:	0a12      	lsrs	r2, r2, #8
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	e7f3      	b.n	8002192 <USBD_HID_Setup+0x2e>
      USBD_CtlSendData (pdev, 
 80021aa:	2201      	movs	r2, #1
 80021ac:	1d19      	adds	r1, r3, #4
 80021ae:	e7f4      	b.n	800219a <USBD_HID_Setup+0x36>
      USBD_CtlError (pdev, req);
 80021b0:	4628      	mov	r0, r5
 80021b2:	f000 fb02 	bl	80027ba <USBD_CtlError>
      return USBD_FAIL; 
 80021b6:	2402      	movs	r4, #2
}
 80021b8:	4620      	mov	r0, r4
 80021ba:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 80021bc:	784a      	ldrb	r2, [r1, #1]
 80021be:	2a0a      	cmp	r2, #10
 80021c0:	d018      	beq.n	80021f4 <USBD_HID_Setup+0x90>
 80021c2:	2a0b      	cmp	r2, #11
 80021c4:	d01c      	beq.n	8002200 <USBD_HID_Setup+0x9c>
 80021c6:	2a06      	cmp	r2, #6
 80021c8:	d1f6      	bne.n	80021b8 <USBD_HID_Setup+0x54>
      if( req->wValue >> 8 == HID_REPORT_DESC)
 80021ca:	884b      	ldrh	r3, [r1, #2]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	2b22      	cmp	r3, #34	; 0x22
 80021d0:	d105      	bne.n	80021de <USBD_HID_Setup+0x7a>
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
 80021d2:	88ca      	ldrh	r2, [r1, #6]
        pbuf = HID_MOUSE_ReportDesc;
 80021d4:	490c      	ldr	r1, [pc, #48]	; (8002208 <USBD_HID_Setup+0xa4>)
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
 80021d6:	2a4a      	cmp	r2, #74	; 0x4a
 80021d8:	bf28      	it	cs
 80021da:	224a      	movcs	r2, #74	; 0x4a
 80021dc:	e7dd      	b.n	800219a <USBD_HID_Setup+0x36>
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80021de:	2b21      	cmp	r3, #33	; 0x21
 80021e0:	d105      	bne.n	80021ee <USBD_HID_Setup+0x8a>
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 80021e2:	88ca      	ldrh	r2, [r1, #6]
        pbuf = USBD_HID_Desc;   
 80021e4:	4909      	ldr	r1, [pc, #36]	; (800220c <USBD_HID_Setup+0xa8>)
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 80021e6:	2a09      	cmp	r2, #9
 80021e8:	bf28      	it	cs
 80021ea:	2209      	movcs	r2, #9
 80021ec:	e7d5      	b.n	800219a <USBD_HID_Setup+0x36>
  uint8_t  *pbuf = NULL;
 80021ee:	4621      	mov	r1, r4
  uint16_t len = 0;
 80021f0:	4622      	mov	r2, r4
 80021f2:	e7d2      	b.n	800219a <USBD_HID_Setup+0x36>
      USBD_CtlSendData (pdev,
 80021f4:	2201      	movs	r2, #1
 80021f6:	f103 0108 	add.w	r1, r3, #8
 80021fa:	f000 fb05 	bl	8002808 <USBD_CtlSendData>
      break;
 80021fe:	e7db      	b.n	80021b8 <USBD_HID_Setup+0x54>
      hhid->AltSetting = (uint8_t)(req->wValue);
 8002200:	788a      	ldrb	r2, [r1, #2]
 8002202:	609a      	str	r2, [r3, #8]
      break;
 8002204:	e7d8      	b.n	80021b8 <USBD_HID_Setup+0x54>
 8002206:	bf00      	nop
 8002208:	20000008 	.word	0x20000008
 800220c:	200000b0 	.word	0x200000b0

08002210 <USBD_HID_DeInit>:
{
 8002210:	b510      	push	{r4, lr}
 8002212:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8002214:	2181      	movs	r1, #129	; 0x81
 8002216:	f000 fe19 	bl	8002e4c <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800221a:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800221e:	b120      	cbz	r0, 800222a <USBD_HID_DeInit+0x1a>
    USBD_free(pdev->pClassData);
 8002220:	f000 fe7c 	bl	8002f1c <USBD_static_free>
    pdev->pClassData = NULL;
 8002224:	2300      	movs	r3, #0
 8002226:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 800222a:	2000      	movs	r0, #0
 800222c:	bd10      	pop	{r4, pc}

0800222e <USBD_HID_Init>:
{
 800222e:	b510      	push	{r4, lr}
  USBD_LL_OpenEP(pdev,
 8002230:	2304      	movs	r3, #4
 8002232:	2203      	movs	r2, #3
 8002234:	2181      	movs	r1, #129	; 0x81
{
 8002236:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8002238:	f000 fdf8 	bl	8002e2c <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 800223c:	2010      	movs	r0, #16
 800223e:	f000 fe69 	bl	8002f14 <USBD_static_malloc>
 8002242:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8002246:	b118      	cbz	r0, 8002250 <USBD_HID_Init+0x22>
    ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8002248:	2300      	movs	r3, #0
 800224a:	7303      	strb	r3, [r0, #12]
  uint8_t ret = 0;
 800224c:	4618      	mov	r0, r3
 800224e:	bd10      	pop	{r4, pc}
    ret = 1; 
 8002250:	2001      	movs	r0, #1
}
 8002252:	bd10      	pop	{r4, pc}

08002254 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002254:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002256:	b180      	cbz	r0, 800227a <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8002258:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800225c:	b113      	cbz	r3, 8002264 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800225e:	2300      	movs	r3, #0
 8002260:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002264:	b109      	cbz	r1, 800226a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002266:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800226a:	2301      	movs	r3, #1
  pdev->id = id;
 800226c:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800226e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002272:	f000 fd95 	bl	8002da0 <USBD_LL_Init>
  
  return USBD_OK; 
 8002276:	2000      	movs	r0, #0
 8002278:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 800227a:	2002      	movs	r0, #2
}
 800227c:	bd08      	pop	{r3, pc}

0800227e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800227e:	b119      	cbz	r1, 8002288 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002280:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8002284:	2000      	movs	r0, #0
 8002286:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8002288:	2002      	movs	r0, #2
  }
  
  return status;
}
 800228a:	4770      	bx	lr

0800228c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800228c:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800228e:	f000 fdbf 	bl	8002e10 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002292:	2000      	movs	r0, #0
 8002294:	bd08      	pop	{r3, pc}

08002296 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002296:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8002298:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800229c:	b90b      	cbnz	r3, 80022a2 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800229e:	2002      	movs	r0, #2
 80022a0:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4798      	blx	r3
 80022a6:	2800      	cmp	r0, #0
 80022a8:	d1f9      	bne.n	800229e <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 80022aa:	bd08      	pop	{r3, pc}

080022ac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80022ac:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80022ae:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	4798      	blx	r3
  return USBD_OK;
}
 80022b6:	2000      	movs	r0, #0
 80022b8:	bd08      	pop	{r3, pc}

080022ba <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80022ba:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80022bc:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 80022c0:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80022c2:	4628      	mov	r0, r5
 80022c4:	f000 fa65 	bl	8002792 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80022c8:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80022ca:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80022ce:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80022d2:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80022d6:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80022da:	f001 031f 	and.w	r3, r1, #31
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d00e      	beq.n	8002300 <USBD_LL_SetupStage+0x46>
 80022e2:	d307      	bcc.n	80022f4 <USBD_LL_SetupStage+0x3a>
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d010      	beq.n	800230a <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80022e8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80022ec:	4620      	mov	r0, r4
 80022ee:	f000 fdbb 	bl	8002e68 <USBD_LL_StallEP>
    break;
 80022f2:	e003      	b.n	80022fc <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80022f4:	4629      	mov	r1, r5
 80022f6:	4620      	mov	r0, r4
 80022f8:	f000 f8d6 	bl	80024a8 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 80022fc:	2000      	movs	r0, #0
 80022fe:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002300:	4629      	mov	r1, r5
 8002302:	4620      	mov	r0, r4
 8002304:	f000 f9ca 	bl	800269c <USBD_StdItfReq>
    break;
 8002308:	e7f8      	b.n	80022fc <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 800230a:	4629      	mov	r1, r5
 800230c:	4620      	mov	r0, r4
 800230e:	f000 f9dd 	bl	80026cc <USBD_StdEPReq>
    break;
 8002312:	e7f3      	b.n	80022fc <USBD_LL_SetupStage+0x42>

08002314 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8002314:	b538      	push	{r3, r4, r5, lr}
 8002316:	4604      	mov	r4, r0
 8002318:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800231a:	bb11      	cbnz	r1, 8002362 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800231c:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8002320:	2b03      	cmp	r3, #3
 8002322:	d10f      	bne.n	8002344 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8002324:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8002328:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 800232c:	4293      	cmp	r3, r2
 800232e:	d90b      	bls.n	8002348 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002330:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8002332:	429a      	cmp	r2, r3
 8002334:	bf28      	it	cs
 8002336:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8002338:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 800233c:	b292      	uxth	r2, r2
 800233e:	4629      	mov	r1, r5
 8002340:	f000 fa77 	bl	8002832 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002344:	2000      	movs	r0, #0
 8002346:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002348:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	b123      	cbz	r3, 800235a <USBD_LL_DataOutStage+0x46>
 8002350:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002354:	2a03      	cmp	r2, #3
 8002356:	d100      	bne.n	800235a <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8002358:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800235a:	4620      	mov	r0, r4
 800235c:	f000 fa71 	bl	8002842 <USBD_CtlSendStatus>
 8002360:	e7f0      	b.n	8002344 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8002362:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0eb      	beq.n	8002344 <USBD_LL_DataOutStage+0x30>
 800236c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002370:	2a03      	cmp	r2, #3
 8002372:	d1e7      	bne.n	8002344 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8002374:	4798      	blx	r3
 8002376:	e7e5      	b.n	8002344 <USBD_LL_DataOutStage+0x30>

08002378 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8002378:	b570      	push	{r4, r5, r6, lr}
 800237a:	4613      	mov	r3, r2
 800237c:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800237e:	460e      	mov	r6, r1
 8002380:	2900      	cmp	r1, #0
 8002382:	d13d      	bne.n	8002400 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002384:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8002388:	2a02      	cmp	r2, #2
 800238a:	d10f      	bne.n	80023ac <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 800238c:	69c5      	ldr	r5, [r0, #28]
 800238e:	6a02      	ldr	r2, [r0, #32]
 8002390:	4295      	cmp	r5, r2
 8002392:	d914      	bls.n	80023be <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8002394:	1aaa      	subs	r2, r5, r2
 8002396:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8002398:	4619      	mov	r1, r3
 800239a:	b292      	uxth	r2, r2
 800239c:	f000 fa41 	bl	8002822 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80023a0:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80023a2:	461a      	mov	r2, r3
 80023a4:	4619      	mov	r1, r3
 80023a6:	4620      	mov	r0, r4
 80023a8:	f000 fda6 	bl	8002ef8 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80023ac:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d102      	bne.n	80023ba <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80023ba:	2000      	movs	r0, #0
 80023bc:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 80023be:	6983      	ldr	r3, [r0, #24]
 80023c0:	fbb3 f5f2 	udiv	r5, r3, r2
 80023c4:	fb02 3515 	mls	r5, r2, r5, r3
 80023c8:	b965      	cbnz	r5, 80023e4 <USBD_LL_DataInStage+0x6c>
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d80a      	bhi.n	80023e4 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80023ce:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d206      	bcs.n	80023e4 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80023d6:	462a      	mov	r2, r5
 80023d8:	f000 fa23 	bl	8002822 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80023dc:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80023e0:	462b      	mov	r3, r5
 80023e2:	e7de      	b.n	80023a2 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80023e4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	b12b      	cbz	r3, 80023f8 <USBD_LL_DataInStage+0x80>
 80023ec:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80023f0:	2a03      	cmp	r2, #3
 80023f2:	d101      	bne.n	80023f8 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 80023f4:	4620      	mov	r0, r4
 80023f6:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 80023f8:	4620      	mov	r0, r4
 80023fa:	f000 fa2d 	bl	8002858 <USBD_CtlReceiveStatus>
 80023fe:	e7d5      	b.n	80023ac <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8002400:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0d7      	beq.n	80023ba <USBD_LL_DataInStage+0x42>
 800240a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800240e:	2a03      	cmp	r2, #3
 8002410:	d1d3      	bne.n	80023ba <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8002412:	4798      	blx	r3
 8002414:	e7d1      	b.n	80023ba <USBD_LL_DataInStage+0x42>

08002416 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002416:	2200      	movs	r2, #0
{
 8002418:	b538      	push	{r3, r4, r5, lr}
 800241a:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800241c:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 800241e:	4611      	mov	r1, r2
 8002420:	2340      	movs	r3, #64	; 0x40
 8002422:	f000 fd03 	bl	8002e2c <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002426:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002428:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 800242c:	2200      	movs	r2, #0
 800242e:	2180      	movs	r1, #128	; 0x80
 8002430:	4620      	mov	r0, r4
 8002432:	f000 fcfb 	bl	8002e2c <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002436:	2301      	movs	r3, #1
 8002438:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800243c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002440:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8002442:	b12b      	cbz	r3, 8002450 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002444:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002448:	7921      	ldrb	r1, [r4, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	4620      	mov	r0, r4
 800244e:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8002450:	2000      	movs	r0, #0
 8002452:	bd38      	pop	{r3, r4, r5, pc}

08002454 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002454:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002456:	2000      	movs	r0, #0
 8002458:	4770      	bx	lr

0800245a <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800245a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800245e:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002462:	2304      	movs	r3, #4
 8002464:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002468:	2000      	movs	r0, #0
 800246a:	4770      	bx	lr

0800246c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 800246c:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002470:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002474:	2000      	movs	r0, #0
 8002476:	4770      	bx	lr

08002478 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002478:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800247a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800247e:	2a03      	cmp	r2, #3
 8002480:	d104      	bne.n	800248c <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002482:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	b103      	cbz	r3, 800248c <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800248a:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800248c:	2000      	movs	r0, #0
 800248e:	bd08      	pop	{r3, pc}

08002490 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002490:	b510      	push	{r4, lr}
 8002492:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8002494:	2180      	movs	r1, #128	; 0x80
 8002496:	f000 fce7 	bl	8002e68 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800249a:	4620      	mov	r0, r4
}
 800249c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80024a0:	2100      	movs	r1, #0
 80024a2:	f000 bce1 	b.w	8002e68 <USBD_LL_StallEP>
	...

080024a8 <USBD_StdDevReq>:
{
 80024a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 80024aa:	784b      	ldrb	r3, [r1, #1]
{
 80024ac:	4604      	mov	r4, r0
 80024ae:	460d      	mov	r5, r1
  switch (req->bRequest) 
 80024b0:	2b09      	cmp	r3, #9
 80024b2:	d879      	bhi.n	80025a8 <USBD_StdDevReq+0x100>
 80024b4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80024b8:	00e500c9 	.word	0x00e500c9
 80024bc:	00d90078 	.word	0x00d90078
 80024c0:	006d0078 	.word	0x006d0078
 80024c4:	0078000a 	.word	0x0078000a
 80024c8:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 80024cc:	884b      	ldrh	r3, [r1, #2]
 80024ce:	0a1a      	lsrs	r2, r3, #8
 80024d0:	3a01      	subs	r2, #1
 80024d2:	2a06      	cmp	r2, #6
 80024d4:	d868      	bhi.n	80025a8 <USBD_StdDevReq+0x100>
 80024d6:	e8df f002 	tbb	[pc, r2]
 80024da:	1c04      	.short	0x1c04
 80024dc:	49676729 	.word	0x49676729
 80024e0:	52          	.byte	0x52
 80024e1:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80024e2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80024e6:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80024e8:	f10d 0106 	add.w	r1, sp, #6
 80024ec:	7c20      	ldrb	r0, [r4, #16]
 80024ee:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 80024f0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80024f4:	2a00      	cmp	r2, #0
 80024f6:	d067      	beq.n	80025c8 <USBD_StdDevReq+0x120>
 80024f8:	88eb      	ldrh	r3, [r5, #6]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d064      	beq.n	80025c8 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 80024fe:	429a      	cmp	r2, r3
 8002500:	bf28      	it	cs
 8002502:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 8002504:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 8002506:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800250a:	4620      	mov	r0, r4
 800250c:	f000 f97c 	bl	8002808 <USBD_CtlSendData>
 8002510:	e05a      	b.n	80025c8 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002512:	7c02      	ldrb	r2, [r0, #16]
 8002514:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002518:	b932      	cbnz	r2, 8002528 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800251c:	f10d 0006 	add.w	r0, sp, #6
 8002520:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002522:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002524:	7043      	strb	r3, [r0, #1]
 8002526:	e7e3      	b.n	80024f0 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252a:	e7f7      	b.n	800251c <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b05      	cmp	r3, #5
 8002530:	d83a      	bhi.n	80025a8 <USBD_StdDevReq+0x100>
 8002532:	e8df f003 	tbb	[pc, r3]
 8002536:	0703      	.short	0x0703
 8002538:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800253c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	e7d1      	b.n	80024e8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002544:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	e7cd      	b.n	80024e8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800254c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	e7c9      	b.n	80024e8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002554:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	e7c5      	b.n	80024e8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800255c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	e7c1      	b.n	80024e8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002564:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	e7bd      	b.n	80024e8 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800256c:	7c03      	ldrb	r3, [r0, #16]
 800256e:	b9db      	cbnz	r3, 80025a8 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002570:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002574:	f10d 0006 	add.w	r0, sp, #6
 8002578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257a:	4798      	blx	r3
 800257c:	e7b8      	b.n	80024f0 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800257e:	7c03      	ldrb	r3, [r0, #16]
 8002580:	b993      	cbnz	r3, 80025a8 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002582:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002586:	f10d 0006 	add.w	r0, sp, #6
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800258e:	2307      	movs	r3, #7
 8002590:	e7c8      	b.n	8002524 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002592:	888b      	ldrh	r3, [r1, #4]
 8002594:	b943      	cbnz	r3, 80025a8 <USBD_StdDevReq+0x100>
 8002596:	88cb      	ldrh	r3, [r1, #6]
 8002598:	b933      	cbnz	r3, 80025a8 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800259a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800259e:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80025a0:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80025a2:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80025a6:	d103      	bne.n	80025b0 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 80025a8:	4620      	mov	r0, r4
 80025aa:	f7ff ff71 	bl	8002490 <USBD_CtlError.constprop.0>
    break;
 80025ae:	e00b      	b.n	80025c8 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 80025b0:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80025b4:	4629      	mov	r1, r5
 80025b6:	f000 fc83 	bl	8002ec0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80025ba:	4620      	mov	r0, r4
 80025bc:	f000 f941 	bl	8002842 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80025c0:	b12d      	cbz	r5, 80025ce <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80025c2:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80025c4:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 80025c8:	2000      	movs	r0, #0
 80025ca:	b003      	add	sp, #12
 80025cc:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80025ce:	2301      	movs	r3, #1
 80025d0:	e7f8      	b.n	80025c4 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 80025d2:	7889      	ldrb	r1, [r1, #2]
 80025d4:	4d30      	ldr	r5, [pc, #192]	; (8002698 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80025d6:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 80025d8:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80025da:	d8e5      	bhi.n	80025a8 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 80025dc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d00c      	beq.n	80025fe <USBD_StdDevReq+0x156>
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d1df      	bne.n	80025a8 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 80025e8:	b9b1      	cbnz	r1, 8002618 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80025ea:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 80025ec:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80025ee:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 80025f2:	f7ff fe5b 	bl	80022ac <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 80025f6:	4620      	mov	r0, r4
 80025f8:	f000 f923 	bl	8002842 <USBD_CtlSendStatus>
 80025fc:	e7e4      	b.n	80025c8 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 80025fe:	2900      	cmp	r1, #0
 8002600:	d0f9      	beq.n	80025f6 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8002602:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002604:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8002606:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002608:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800260c:	4620      	mov	r0, r4
 800260e:	f7ff fe42 	bl	8002296 <USBD_SetClassConfig>
 8002612:	2802      	cmp	r0, #2
 8002614:	d1ef      	bne.n	80025f6 <USBD_StdDevReq+0x14e>
 8002616:	e7c7      	b.n	80025a8 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8002618:	6841      	ldr	r1, [r0, #4]
 800261a:	2901      	cmp	r1, #1
 800261c:	d0eb      	beq.n	80025f6 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800261e:	b2c9      	uxtb	r1, r1
 8002620:	f7ff fe44 	bl	80022ac <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002624:	7829      	ldrb	r1, [r5, #0]
 8002626:	6061      	str	r1, [r4, #4]
 8002628:	e7f0      	b.n	800260c <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 800262a:	88ca      	ldrh	r2, [r1, #6]
 800262c:	2a01      	cmp	r2, #1
 800262e:	d1bb      	bne.n	80025a8 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8002630:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002634:	2b02      	cmp	r3, #2
 8002636:	d003      	beq.n	8002640 <USBD_StdDevReq+0x198>
 8002638:	2b03      	cmp	r3, #3
 800263a:	d1b5      	bne.n	80025a8 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 800263c:	1d01      	adds	r1, r0, #4
 800263e:	e764      	b.n	800250a <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8002640:	4601      	mov	r1, r0
 8002642:	2300      	movs	r3, #0
 8002644:	f841 3f08 	str.w	r3, [r1, #8]!
 8002648:	e75f      	b.n	800250a <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 800264a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800264e:	3b02      	subs	r3, #2
 8002650:	2b01      	cmp	r3, #1
 8002652:	d8a9      	bhi.n	80025a8 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8002654:	2301      	movs	r3, #1
 8002656:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8002658:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800265c:	b10b      	cbz	r3, 8002662 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800265e:	2303      	movs	r3, #3
 8002660:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8002662:	2202      	movs	r2, #2
 8002664:	f104 010c 	add.w	r1, r4, #12
 8002668:	e74f      	b.n	800250a <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800266a:	884b      	ldrh	r3, [r1, #2]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d1ab      	bne.n	80025c8 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002670:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8002674:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002678:	4629      	mov	r1, r5
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	4620      	mov	r0, r4
 800267e:	4798      	blx	r3
 8002680:	e7b9      	b.n	80025f6 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8002682:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002686:	3b02      	subs	r3, #2
 8002688:	2b01      	cmp	r3, #1
 800268a:	d88d      	bhi.n	80025a8 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800268c:	884b      	ldrh	r3, [r1, #2]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d19a      	bne.n	80025c8 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002692:	2300      	movs	r3, #0
 8002694:	e7ec      	b.n	8002670 <USBD_StdDevReq+0x1c8>
 8002696:	bf00      	nop
 8002698:	2000011c 	.word	0x2000011c

0800269c <USBD_StdItfReq>:
{
 800269c:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 800269e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 80026a2:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 80026a4:	2b03      	cmp	r3, #3
{
 80026a6:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 80026a8:	d10d      	bne.n	80026c6 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80026aa:	790b      	ldrb	r3, [r1, #4]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d80a      	bhi.n	80026c6 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 80026b0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80026b8:	88eb      	ldrh	r3, [r5, #6]
 80026ba:	b913      	cbnz	r3, 80026c2 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 80026bc:	4620      	mov	r0, r4
 80026be:	f000 f8c0 	bl	8002842 <USBD_CtlSendStatus>
}
 80026c2:	2000      	movs	r0, #0
 80026c4:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 80026c6:	f7ff fee3 	bl	8002490 <USBD_CtlError.constprop.0>
    break;
 80026ca:	e7fa      	b.n	80026c2 <USBD_StdItfReq+0x26>

080026cc <USBD_StdEPReq>:
{
 80026cc:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 80026ce:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 80026d0:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80026d2:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80026d6:	2a20      	cmp	r2, #32
{
 80026d8:	4604      	mov	r4, r0
 80026da:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80026dc:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 80026de:	d105      	bne.n	80026ec <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 80026e0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	4798      	blx	r3
}
 80026e8:	2000      	movs	r0, #0
 80026ea:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 80026ec:	784a      	ldrb	r2, [r1, #1]
 80026ee:	2a01      	cmp	r2, #1
 80026f0:	d01c      	beq.n	800272c <USBD_StdEPReq+0x60>
 80026f2:	d32a      	bcc.n	800274a <USBD_StdEPReq+0x7e>
 80026f4:	2a03      	cmp	r2, #3
 80026f6:	d1f7      	bne.n	80026e8 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80026f8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80026fc:	2a02      	cmp	r2, #2
 80026fe:	d040      	beq.n	8002782 <USBD_StdEPReq+0xb6>
 8002700:	2a03      	cmp	r2, #3
 8002702:	d002      	beq.n	800270a <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8002704:	f7ff fec4 	bl	8002490 <USBD_CtlError.constprop.0>
      break;
 8002708:	e7ee      	b.n	80026e8 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800270a:	884a      	ldrh	r2, [r1, #2]
 800270c:	b922      	cbnz	r2, 8002718 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800270e:	065e      	lsls	r6, r3, #25
 8002710:	d002      	beq.n	8002718 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8002712:	4619      	mov	r1, r3
 8002714:	f000 fba8 	bl	8002e68 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8002718:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800271c:	4629      	mov	r1, r5
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	4620      	mov	r0, r4
 8002722:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002724:	4620      	mov	r0, r4
 8002726:	f000 f88c 	bl	8002842 <USBD_CtlSendStatus>
 800272a:	e7dd      	b.n	80026e8 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 800272c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002730:	2a02      	cmp	r2, #2
 8002732:	d026      	beq.n	8002782 <USBD_StdEPReq+0xb6>
 8002734:	2a03      	cmp	r2, #3
 8002736:	d1e5      	bne.n	8002704 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002738:	884a      	ldrh	r2, [r1, #2]
 800273a:	2a00      	cmp	r2, #0
 800273c:	d1d4      	bne.n	80026e8 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 800273e:	0659      	lsls	r1, r3, #25
 8002740:	d0f0      	beq.n	8002724 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8002742:	4619      	mov	r1, r3
 8002744:	f000 fb9e 	bl	8002e84 <USBD_LL_ClearStallEP>
 8002748:	e7e6      	b.n	8002718 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 800274a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800274e:	2a02      	cmp	r2, #2
 8002750:	d017      	beq.n	8002782 <USBD_StdEPReq+0xb6>
 8002752:	2a03      	cmp	r2, #3
 8002754:	d1d6      	bne.n	8002704 <USBD_StdEPReq+0x38>
 8002756:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800275a:	f016 0f80 	tst.w	r6, #128	; 0x80
 800275e:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002762:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002764:	bf14      	ite	ne
 8002766:	3514      	addne	r5, #20
 8002768:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800276c:	f000 fb98 	bl	8002ea0 <USBD_LL_IsStallEP>
 8002770:	b168      	cbz	r0, 800278e <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8002772:	2301      	movs	r3, #1
 8002774:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8002776:	2202      	movs	r2, #2
 8002778:	4629      	mov	r1, r5
 800277a:	4620      	mov	r0, r4
 800277c:	f000 f844 	bl	8002808 <USBD_CtlSendData>
      break;
 8002780:	e7b2      	b.n	80026e8 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8002782:	065a      	lsls	r2, r3, #25
 8002784:	d0b0      	beq.n	80026e8 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8002786:	4619      	mov	r1, r3
 8002788:	f000 fb6e 	bl	8002e68 <USBD_LL_StallEP>
 800278c:	e7ac      	b.n	80026e8 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 800278e:	6028      	str	r0, [r5, #0]
 8002790:	e7f1      	b.n	8002776 <USBD_StdEPReq+0xaa>

08002792 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002792:	780b      	ldrb	r3, [r1, #0]
 8002794:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8002796:	784b      	ldrb	r3, [r1, #1]
 8002798:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800279a:	78ca      	ldrb	r2, [r1, #3]
 800279c:	788b      	ldrb	r3, [r1, #2]
 800279e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80027a2:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80027a4:	794a      	ldrb	r2, [r1, #5]
 80027a6:	790b      	ldrb	r3, [r1, #4]
 80027a8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80027ac:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80027ae:	79ca      	ldrb	r2, [r1, #7]
 80027b0:	798b      	ldrb	r3, [r1, #6]
 80027b2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80027b6:	80c3      	strh	r3, [r0, #6]
 80027b8:	4770      	bx	lr

080027ba <USBD_CtlError>:
{
 80027ba:	b510      	push	{r4, lr}
 80027bc:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 80027be:	2180      	movs	r1, #128	; 0x80
 80027c0:	f000 fb52 	bl	8002e68 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80027c4:	4620      	mov	r0, r4
}
 80027c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80027ca:	2100      	movs	r1, #0
 80027cc:	f000 bb4c 	b.w	8002e68 <USBD_LL_StallEP>

080027d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80027d0:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80027d2:	b188      	cbz	r0, 80027f8 <USBD_GetString+0x28>
 80027d4:	4605      	mov	r5, r0
 80027d6:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80027d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2c00      	cmp	r4, #0
 80027e0:	d1f9      	bne.n	80027d6 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	3302      	adds	r3, #2
 80027e6:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80027e8:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80027ea:	2303      	movs	r3, #3
 80027ec:	704b      	strb	r3, [r1, #1]
 80027ee:	2302      	movs	r3, #2
 80027f0:	3801      	subs	r0, #1
    while (*desc != '\0') 
 80027f2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80027f6:	b905      	cbnz	r5, 80027fa <USBD_GetString+0x2a>
 80027f8:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	54cd      	strb	r5, [r1, r3]
 80027fe:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 8002800:	3302      	adds	r3, #2
 8002802:	b2db      	uxtb	r3, r3
 8002804:	548c      	strb	r4, [r1, r2]
 8002806:	e7f4      	b.n	80027f2 <USBD_GetString+0x22>

08002808 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8002808:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800280a:	2202      	movs	r2, #2
{
 800280c:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800280e:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8002812:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002814:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8002816:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002818:	2100      	movs	r1, #0
 800281a:	f000 fb5f 	bl	8002edc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800281e:	2000      	movs	r0, #0
 8002820:	bd10      	pop	{r4, pc}

08002822 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002822:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002824:	4613      	mov	r3, r2
 8002826:	460a      	mov	r2, r1
 8002828:	2100      	movs	r1, #0
 800282a:	f000 fb57 	bl	8002edc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800282e:	2000      	movs	r0, #0
 8002830:	bd08      	pop	{r3, pc}

08002832 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8002832:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8002834:	4613      	mov	r3, r2
 8002836:	460a      	mov	r2, r1
 8002838:	2100      	movs	r1, #0
 800283a:	f000 fb5d 	bl	8002ef8 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 800283e:	2000      	movs	r0, #0
 8002840:	bd08      	pop	{r3, pc}

08002842 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8002842:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002844:	2304      	movs	r3, #4
 8002846:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800284a:	2300      	movs	r3, #0
 800284c:	461a      	mov	r2, r3
 800284e:	4619      	mov	r1, r3
 8002850:	f000 fb44 	bl	8002edc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002854:	2000      	movs	r0, #0
 8002856:	bd08      	pop	{r3, pc}

08002858 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8002858:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800285a:	2305      	movs	r3, #5
 800285c:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002860:	2300      	movs	r3, #0
 8002862:	461a      	mov	r2, r3
 8002864:	4619      	mov	r1, r3
 8002866:	f000 fb47 	bl	8002ef8 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800286a:	2000      	movs	r0, #0
 800286c:	bd08      	pop	{r3, pc}
	...

08002870 <KeyMatrix_Scan>:
KP_ROW2 = 0x0004;
KP_ROW3 = 0x0008;
*/

uint8_t KeyMatrix_Scan(void)
{
 8002870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002874:	2400      	movs	r4, #0
 8002876:	4d1a      	ldr	r5, [pc, #104]	; (80028e0 <KeyMatrix_Scan+0x70>)
uint8_t	COL_COUNT;
uint16_t	KeyData_Raw = 0;

	for(ROW_COUNT = 0; ROW_COUNT <= 3; ROW_COUNT++)		// 4x4 KeyScan
	{
		HAL_GPIO_WritePin(GPIOA, KP_ROW0_Pin|KP_ROW1_Pin|KP_ROW2_Pin|KP_ROW3_Pin, GPIO_PIN_SET);
 8002878:	2601      	movs	r6, #1
 800287a:	462f      	mov	r7, r5
		HAL_GPIO_WritePin(GPIOA, (KP_ROW0_Pin << ROW_COUNT) & 0x000F, GPIO_PIN_RESET);
 800287c:	46a1      	mov	r9, r4
		HAL_GPIO_WritePin(GPIOA, KP_ROW0_Pin|KP_ROW1_Pin|KP_ROW2_Pin|KP_ROW3_Pin, GPIO_PIN_SET);
 800287e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80028e4 <KeyMatrix_Scan+0x74>
 8002882:	2201      	movs	r2, #1
 8002884:	210f      	movs	r1, #15
 8002886:	4817      	ldr	r0, [pc, #92]	; (80028e4 <KeyMatrix_Scan+0x74>)
 8002888:	f7fd fe14 	bl	80004b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, (KP_ROW0_Pin << ROW_COUNT) & 0x000F, GPIO_PIN_RESET);
 800288c:	fa06 f104 	lsl.w	r1, r6, r4
 8002890:	2200      	movs	r2, #0
 8002892:	b289      	uxth	r1, r1
 8002894:	4813      	ldr	r0, [pc, #76]	; (80028e4 <KeyMatrix_Scan+0x74>)
 8002896:	f7fd fe0d 	bl	80004b4 <HAL_GPIO_WritePin>

		HAL_Delay(1);
 800289a:	2001      	movs	r0, #1
 800289c:	f7fd fc9e 	bl	80001dc <HAL_Delay>
		KeyData_Raw = GPIOA->IDR;
		KeyData_Raw = (KeyData_Raw >> 4) & 0x000F;
 80028a0:	2300      	movs	r3, #0
		KeyData_Raw = GPIOA->IDR;
 80028a2:	f8d8 2008 	ldr.w	r2, [r8, #8]
		KeyData_Raw = (KeyData_Raw >> 4) & 0x000F;
 80028a6:	f3c2 1203 	ubfx	r2, r2, #4, #4

//		xprintf("data = %04X\n",KeyData_Raw);

		for(COL_COUNT = 0; COL_COUNT <= 3; COL_COUNT++)
		{
			if(KeyData_Raw & 0x0001)
 80028aa:	07d1      	lsls	r1, r2, #31
			{
				keydata[(COL_COUNT + ROW_COUNT*4)] = 0;		// 押されてない
 80028ac:	bf4c      	ite	mi
 80028ae:	f805 9003 	strbmi.w	r9, [r5, r3]
			}
			else
			{
				keydata[(COL_COUNT + ROW_COUNT*4)] = 1;		// 押されていた
 80028b2:	54ee      	strbpl	r6, [r5, r3]
 80028b4:	3301      	adds	r3, #1
		for(COL_COUNT = 0; COL_COUNT <= 3; COL_COUNT++)
 80028b6:	2b04      	cmp	r3, #4
			}
			KeyData_Raw = KeyData_Raw >> 1;
 80028b8:	ea4f 0252 	mov.w	r2, r2, lsr #1
		for(COL_COUNT = 0; COL_COUNT <= 3; COL_COUNT++)
 80028bc:	d1f5      	bne.n	80028aa <KeyMatrix_Scan+0x3a>
 80028be:	3401      	adds	r4, #1
	for(ROW_COUNT = 0; ROW_COUNT <= 3; ROW_COUNT++)		// 4x4 KeyScan
 80028c0:	2c04      	cmp	r4, #4
 80028c2:	f105 0504 	add.w	r5, r5, #4
 80028c6:	d1dc      	bne.n	8002882 <KeyMatrix_Scan+0x12>
 80028c8:	2300      	movs	r3, #0
	}

//	xputs("key : ");
	for(i = 0; i <= 15; i++)
	{
		if(keydata[i] == 1) return i;	// 0チャネル目から探索、先に見つかった所を返す
 80028ca:	5cfa      	ldrb	r2, [r7, r3]
 80028cc:	b2d8      	uxtb	r0, r3
 80028ce:	2a01      	cmp	r2, #1
 80028d0:	d003      	beq.n	80028da <KeyMatrix_Scan+0x6a>
 80028d2:	3301      	adds	r3, #1
	for(i = 0; i <= 15; i++)
 80028d4:	2b10      	cmp	r3, #16
 80028d6:	d1f8      	bne.n	80028ca <KeyMatrix_Scan+0x5a>
//		xprintf(" %1d",keydata[i]);
	}
//	xputs("\n");
	return 0xFF;		// 押されていない時
 80028d8:	20ff      	movs	r0, #255	; 0xff
}
 80028da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028de:	bf00      	nop
 80028e0:	2000011d 	.word	0x2000011d
 80028e4:	40010800 	.word	0x40010800

080028e8 <msgtx_putc>:

	return;
}

void msgtx_putc(uint8_t c)
{
 80028e8:	b507      	push	{r0, r1, r2, lr}
//	HAL_UART_Transmit_IT(huart_cobs,&c,1);
	char buf[1];
	buf[0] = c;
 80028ea:	a902      	add	r1, sp, #8
 80028ec:	f801 0d04 	strb.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 80028f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028f4:	2201      	movs	r2, #1
 80028f6:	4803      	ldr	r0, [pc, #12]	; (8002904 <msgtx_putc+0x1c>)
 80028f8:	f7fe ffa6 	bl	8001848 <HAL_UART_Transmit>

}
 80028fc:	b003      	add	sp, #12
 80028fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8002902:	bf00      	nop
 8002904:	2000014c 	.word	0x2000014c

08002908 <HAL_TIM_PeriodElapsedCallback>:
  if(htim->Instance == TIM2)    // 36M / 999(1000) / 3600 = 100mSec
 8002908:	6803      	ldr	r3, [r0, #0]
 800290a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290e:	d104      	bne.n	800291a <HAL_TIM_PeriodElapsedCallback+0x12>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002910:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002914:	4801      	ldr	r0, [pc, #4]	; (800291c <HAL_TIM_PeriodElapsedCallback+0x14>)
 8002916:	f7fd bdd2 	b.w	80004be <HAL_GPIO_TogglePin>
 800291a:	4770      	bx	lr
 800291c:	40011000 	.word	0x40011000

08002920 <SystemClock_Config>:
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002920:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8002924:	b510      	push	{r4, lr}
 8002926:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002928:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800292a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800292c:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800292e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002930:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002932:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002936:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002938:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800293a:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800293c:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800293e:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002940:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002942:	f7fe f9a3 	bl	8000c8c <HAL_RCC_OscConfig>
 8002946:	b100      	cbz	r0, 800294a <SystemClock_Config+0x2a>
 8002948:	e7fe      	b.n	8002948 <SystemClock_Config+0x28>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800294a:	230f      	movs	r3, #15
 800294c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800294e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002952:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002954:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002956:	4621      	mov	r1, r4
 8002958:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800295a:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800295c:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800295e:	f7fe fb5d 	bl	800101c <HAL_RCC_ClockConfig>
 8002962:	b100      	cbz	r0, 8002966 <SystemClock_Config+0x46>
 8002964:	e7fe      	b.n	8002964 <SystemClock_Config+0x44>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002966:	2310      	movs	r3, #16
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002968:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800296a:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800296c:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800296e:	f7fe fc1f 	bl	80011b0 <HAL_RCCEx_PeriphCLKConfig>
 8002972:	4604      	mov	r4, r0
 8002974:	b100      	cbz	r0, 8002978 <SystemClock_Config+0x58>
 8002976:	e7fe      	b.n	8002976 <SystemClock_Config+0x56>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002978:	f7fe fbf4 	bl	8001164 <HAL_RCC_GetHCLKFreq>
 800297c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002980:	fbb0 f0f3 	udiv	r0, r0, r3
 8002984:	f7fd fc8e 	bl	80002a4 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002988:	2004      	movs	r0, #4
 800298a:	f7fd fca1 	bl	80002d0 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800298e:	4622      	mov	r2, r4
 8002990:	4621      	mov	r1, r4
 8002992:	f04f 30ff 	mov.w	r0, #4294967295
 8002996:	f7fd fc45 	bl	8000224 <HAL_NVIC_SetPriority>
}
 800299a:	b014      	add	sp, #80	; 0x50
 800299c:	bd10      	pop	{r4, pc}
	...

080029a0 <main>:
{
 80029a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029a2:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80029a4:	f7fd fbf6 	bl	8000194 <HAL_Init>
  xfunc_out = msgtx_putc;		/* xprintf?�ｿｽ�ｿｽo?�ｿｽ�ｿｽﾍデ?�ｿｽ�ｿｽo?�ｿｽ�ｿｽC?�ｿｽ�ｿｽX?�ｿｽ�ｿｽw?�ｿｽ�ｿｽ?�ｿｽ�ｿｽ(UART?�ｿｽ�ｿｽg?�ｿｽ�ｿｽp?�ｿｽ�ｿｽ?�ｿｽ�ｿｽ) */
 80029a8:	4a4c      	ldr	r2, [pc, #304]	; (8002adc <main+0x13c>)
 80029aa:	4b4d      	ldr	r3, [pc, #308]	; (8002ae0 <main+0x140>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2400      	movs	r4, #0
  xfunc_out = msgtx_putc;		/* xprintf?�ｿｽ�ｿｽo?�ｿｽ�ｿｽﾍデ?�ｿｽ�ｿｽo?�ｿｽ�ｿｽC?�ｿｽ�ｿｽX?�ｿｽ�ｿｽw?�ｿｽ�ｿｽ?�ｿｽ�ｿｽ(UART?�ｿｽ�ｿｽg?�ｿｽ�ｿｽp?�ｿｽ�ｿｽ?�ｿｽ�ｿｽ) */
 80029ae:	601a      	str	r2, [r3, #0]
  SystemClock_Config();
 80029b0:	f7ff ffb6 	bl	8002920 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b4:	4b4b      	ldr	r3, [pc, #300]	; (8002ae4 <main+0x144>)
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80029b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ba:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80029bc:	484a      	ldr	r0, [pc, #296]	; (8002ae8 <main+0x148>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029be:	f042 0210 	orr.w	r2, r2, #16
 80029c2:	619a      	str	r2, [r3, #24]
 80029c4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c6:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c8:	f002 0210 	and.w	r2, r2, #16
 80029cc:	9201      	str	r2, [sp, #4]
 80029ce:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029d0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d2:	2602      	movs	r6, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029d4:	f042 0220 	orr.w	r2, r2, #32
 80029d8:	619a      	str	r2, [r3, #24]
 80029da:	699a      	ldr	r2, [r3, #24]
 80029dc:	f002 0220 	and.w	r2, r2, #32
 80029e0:	9202      	str	r2, [sp, #8]
 80029e2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e4:	699a      	ldr	r2, [r3, #24]
 80029e6:	f042 0204 	orr.w	r2, r2, #4
 80029ea:	619a      	str	r2, [r3, #24]
 80029ec:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80029ee:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	9303      	str	r3, [sp, #12]
 80029f6:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80029f8:	f7fd fd5c 	bl	80004b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, KP_ROW0_Pin|KP_ROW1_Pin|KP_ROW2_Pin|KP_ROW3_Pin, GPIO_PIN_RESET);
 80029fc:	2200      	movs	r2, #0
 80029fe:	210f      	movs	r1, #15
 8002a00:	483a      	ldr	r0, [pc, #232]	; (8002aec <main+0x14c>)
 8002a02:	f7fd fd57 	bl	80004b4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 8002a06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002a0a:	a906      	add	r1, sp, #24
 8002a0c:	4836      	ldr	r0, [pc, #216]	; (8002ae8 <main+0x148>)
  GPIO_InitStruct.Pin = LED_Pin;
 8002a0e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a10:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a14:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002a16:	f7fd fc6d 	bl	80002f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KP_ROW0_Pin|KP_ROW1_Pin|KP_ROW2_Pin|KP_ROW3_Pin;
 8002a1a:	230f      	movs	r3, #15
 8002a1c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002a1e:	2311      	movs	r3, #17
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a20:	a906      	add	r1, sp, #24
 8002a22:	4832      	ldr	r0, [pc, #200]	; (8002aec <main+0x14c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002a24:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a26:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a28:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a2a:	f7fd fc63 	bl	80002f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KP_COL0_Pin|KP_COL1_Pin|KP_COL2_Pin|KP_COL3_Pin;
 8002a2e:	23f0      	movs	r3, #240	; 0xf0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a30:	a906      	add	r1, sp, #24
 8002a32:	482e      	ldr	r0, [pc, #184]	; (8002aec <main+0x14c>)
  GPIO_InitStruct.Pin = KP_COL0_Pin|KP_COL1_Pin|KP_COL2_Pin|KP_COL3_Pin;
 8002a34:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a36:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a38:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3a:	f7fd fc5b 	bl	80002f4 <HAL_GPIO_Init>
  MX_USB_DEVICE_Init();
 8002a3e:	f000 f941 	bl	8002cc4 <MX_USB_DEVICE_Init>
  huart1.Init.BaudRate = 115200;
 8002a42:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8002a46:	482a      	ldr	r0, [pc, #168]	; (8002af0 <main+0x150>)
  huart1.Init.BaudRate = 115200;
 8002a48:	492a      	ldr	r1, [pc, #168]	; (8002af4 <main+0x154>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a4a:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8002a4c:	e880 000a 	stmia.w	r0, {r1, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a50:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a52:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a54:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a56:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a58:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a5a:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a5c:	f7fe fec6 	bl	80017ec <HAL_UART_Init>
 8002a60:	b100      	cbz	r0, 8002a64 <main+0xc4>
 8002a62:	e7fe      	b.n	8002a62 <main+0xc2>
  htim2.Init.Prescaler = 999;
 8002a64:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002a68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 8002a6c:	4c22      	ldr	r4, [pc, #136]	; (8002af8 <main+0x158>)
  htim2.Init.Prescaler = 999;
 8002a6e:	e884 000c 	stmia.w	r4, {r2, r3}
  htim2.Init.Period = 3600;
 8002a72:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002a76:	60e3      	str	r3, [r4, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a78:	2380      	movs	r3, #128	; 0x80
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a7a:	60a0      	str	r0, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a7c:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a7e:	4620      	mov	r0, r4
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a80:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a82:	f7fe fdaf 	bl	80015e4 <HAL_TIM_Base_Init>
 8002a86:	b100      	cbz	r0, 8002a8a <main+0xea>
 8002a88:	e7fe      	b.n	8002a88 <main+0xe8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a8e:	a906      	add	r1, sp, #24
 8002a90:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a92:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a94:	f7fe fc0f 	bl	80012b6 <HAL_TIM_ConfigClockSource>
 8002a98:	b100      	cbz	r0, 8002a9c <main+0xfc>
 8002a9a:	e7fe      	b.n	8002a9a <main+0xfa>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a9c:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a9e:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002aa0:	a904      	add	r1, sp, #16
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f7fe fdb8 	bl	8001618 <HAL_TIMEx_MasterConfigSynchronization>
 8002aa8:	b100      	cbz	r0, 8002aac <main+0x10c>
 8002aaa:	e7fe      	b.n	8002aaa <main+0x10a>
	if(DetectKey_old != DetectKey && DetectKey != 0xFF)  // 繧ｨ�ｿｽ?繧ｸ讀懶ｿｽ?�ｿｽ縺励※謚ｼ荳区､懶ｿｽ?�ｿｽ
 8002aac:	4d13      	ldr	r5, [pc, #76]	; (8002afc <main+0x15c>)
  HAL_TIM_Base_Start_IT(&htim2);
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f7fe fbf6 	bl	80012a0 <HAL_TIM_Base_Start_IT>
 8002ab4:	462e      	mov	r6, r5
		xprintf("Push Key %d\n",DetectKey);
 8002ab6:	4f12      	ldr	r7, [pc, #72]	; (8002b00 <main+0x160>)
	HAL_Delay(10);
 8002ab8:	200a      	movs	r0, #10
 8002aba:	f7fd fb8f 	bl	80001dc <HAL_Delay>
	DetectKey = KeyMatrix_Scan();
 8002abe:	f7ff fed7 	bl	8002870 <KeyMatrix_Scan>
	if(DetectKey_old != DetectKey && DetectKey != 0xFF)  // 繧ｨ�ｿｽ?繧ｸ讀懶ｿｽ?�ｿｽ縺励※謚ｼ荳区､懶ｿｽ?�ｿｽ
 8002ac2:	782b      	ldrb	r3, [r5, #0]
	DetectKey = KeyMatrix_Scan();
 8002ac4:	4604      	mov	r4, r0
	if(DetectKey_old != DetectKey && DetectKey != 0xFF)  // 繧ｨ�ｿｽ?繧ｸ讀懶ｿｽ?�ｿｽ縺励※謚ｼ荳区､懶ｿｽ?�ｿｽ
 8002ac6:	4283      	cmp	r3, r0
 8002ac8:	d006      	beq.n	8002ad8 <main+0x138>
 8002aca:	28ff      	cmp	r0, #255	; 0xff
 8002acc:	d004      	beq.n	8002ad8 <main+0x138>
		DetectKey_old = DetectKey;
 8002ace:	7028      	strb	r0, [r5, #0]
		xprintf("Push Key %d\n",DetectKey);
 8002ad0:	4601      	mov	r1, r0
 8002ad2:	4638      	mov	r0, r7
 8002ad4:	f000 fb6e 	bl	80031b4 <xprintf>
	DetectKey_old = DetectKey;
 8002ad8:	7034      	strb	r4, [r6, #0]
	HAL_Delay(10);
 8002ada:	e7ed      	b.n	8002ab8 <main+0x118>
 8002adc:	080028e9 	.word	0x080028e9
 8002ae0:	20000a54 	.word	0x20000a54
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40011000 	.word	0x40011000
 8002aec:	40010800 	.word	0x40010800
 8002af0:	2000014c 	.word	0x2000014c
 8002af4:	40013800 	.word	0x40013800
 8002af8:	2000018c 	.word	0x2000018c
 8002afc:	200000c6 	.word	0x200000c6
 8002b00:	0800328c 	.word	0x0800328c

08002b04 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002b04:	e7fe      	b.n	8002b04 <_Error_Handler>
	...

08002b08 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b08:	4b27      	ldr	r3, [pc, #156]	; (8002ba8 <HAL_MspInit+0xa0>)
{
 8002b0a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b0c:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b0e:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b10:	f042 0201 	orr.w	r2, r2, #1
 8002b14:	619a      	str	r2, [r3, #24]
 8002b16:	699a      	ldr	r2, [r3, #24]
 8002b18:	f002 0201 	and.w	r2, r2, #1
 8002b1c:	9200      	str	r2, [sp, #0]
 8002b1e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b20:	69da      	ldr	r2, [r3, #28]
 8002b22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b26:	61da      	str	r2, [r3, #28]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	9301      	str	r3, [sp, #4]
 8002b30:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b32:	f7fd fb65 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002b36:	2200      	movs	r2, #0
 8002b38:	f06f 000b 	mvn.w	r0, #11
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	f7fd fb71 	bl	8000224 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	f06f 000a 	mvn.w	r0, #10
 8002b48:	4611      	mov	r1, r2
 8002b4a:	f7fd fb6b 	bl	8000224 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f06f 0009 	mvn.w	r0, #9
 8002b54:	4611      	mov	r1, r2
 8002b56:	f7fd fb65 	bl	8000224 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f06f 0004 	mvn.w	r0, #4
 8002b60:	4611      	mov	r1, r2
 8002b62:	f7fd fb5f 	bl	8000224 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002b66:	2200      	movs	r2, #0
 8002b68:	f06f 0003 	mvn.w	r0, #3
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	f7fd fb59 	bl	8000224 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002b72:	2200      	movs	r2, #0
 8002b74:	f06f 0001 	mvn.w	r0, #1
 8002b78:	4611      	mov	r1, r2
 8002b7a:	f7fd fb53 	bl	8000224 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f04f 30ff 	mov.w	r0, #4294967295
 8002b84:	4611      	mov	r1, r2
 8002b86:	f7fd fb4d 	bl	8000224 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b8a:	4a08      	ldr	r2, [pc, #32]	; (8002bac <HAL_MspInit+0xa4>)
 8002b8c:	6853      	ldr	r3, [r2, #4]
 8002b8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b96:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8002b98:	6853      	ldr	r3, [r2, #4]
 8002b9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b9e:	6053      	str	r3, [r2, #4]
  /* USER CODE END MspInit 1 */
}
 8002ba0:	b003      	add	sp, #12
 8002ba2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ba6:	bf00      	nop
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40010000 	.word	0x40010000

08002bb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8002bb0:	6803      	ldr	r3, [r0, #0]
{
 8002bb2:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8002bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb8:	d112      	bne.n	8002be0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002bbe:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bc0:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bc8:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bca:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bcc:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	9301      	str	r3, [sp, #4]
 8002bd4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bd6:	f7fd fb25 	bl	8000224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bda:	201c      	movs	r0, #28
 8002bdc:	f7fd fb56 	bl	800028c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002be0:	b003      	add	sp, #12
 8002be2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002be8 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002be8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002bea:	6802      	ldr	r2, [r0, #0]
 8002bec:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <HAL_UART_MspInit+0x50>)
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d11f      	bne.n	8002c32 <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bf2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002bf6:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf8:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bfe:	619a      	str	r2, [r3, #24]
 8002c00:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c02:	480e      	ldr	r0, [pc, #56]	; (8002c3c <HAL_UART_MspInit+0x54>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c08:	9301      	str	r3, [sp, #4]
 8002c0a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c10:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c12:	2302      	movs	r3, #2
 8002c14:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c16:	2303      	movs	r3, #3
 8002c18:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1a:	f7fd fb6b 	bl	80002f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c22:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c24:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c26:	a902      	add	r1, sp, #8
 8002c28:	4804      	ldr	r0, [pc, #16]	; (8002c3c <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c2a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2e:	f7fd fb61 	bl	80002f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c32:	b007      	add	sp, #28
 8002c34:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c38:	40013800 	.word	0x40013800
 8002c3c:	40010800 	.word	0x40010800

08002c40 <NMI_Handler>:
 8002c40:	4770      	bx	lr

08002c42 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002c42:	e7fe      	b.n	8002c42 <HardFault_Handler>

08002c44 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002c44:	e7fe      	b.n	8002c44 <MemManage_Handler>

08002c46 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002c46:	e7fe      	b.n	8002c46 <BusFault_Handler>

08002c48 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002c48:	e7fe      	b.n	8002c48 <UsageFault_Handler>

08002c4a <SVC_Handler>:
 8002c4a:	4770      	bx	lr

08002c4c <DebugMon_Handler>:
 8002c4c:	4770      	bx	lr

08002c4e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002c4e:	4770      	bx	lr

08002c50 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002c50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c52:	f7fd fab1 	bl	80001b8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002c5a:	f7fd bb46 	b.w	80002ea <HAL_SYSTICK_IRQHandler>
	...

08002c60 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002c60:	4801      	ldr	r0, [pc, #4]	; (8002c68 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8002c62:	f7fd bd37 	b.w	80006d4 <HAL_PCD_IRQHandler>
 8002c66:	bf00      	nop
 8002c68:	200003f0 	.word	0x200003f0

08002c6c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c6c:	4801      	ldr	r0, [pc, #4]	; (8002c74 <TIM2_IRQHandler+0x8>)
 8002c6e:	f7fe bbdf 	b.w	8001430 <HAL_TIM_IRQHandler>
 8002c72:	bf00      	nop
 8002c74:	2000018c 	.word	0x2000018c

08002c78 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002c78:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <SystemInit+0x40>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	f042 0201 	orr.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002c82:	6859      	ldr	r1, [r3, #4]
 8002c84:	4a0d      	ldr	r2, [pc, #52]	; (8002cbc <SystemInit+0x44>)
 8002c86:	400a      	ands	r2, r1
 8002c88:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002c90:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c94:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c9c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002ca4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002ca6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002caa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002cac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cb0:	4b03      	ldr	r3, [pc, #12]	; (8002cc0 <SystemInit+0x48>)
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	f8ff0000 	.word	0xf8ff0000
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8002cc4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8002cc6:	4c07      	ldr	r4, [pc, #28]	; (8002ce4 <MX_USB_DEVICE_Init+0x20>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	4907      	ldr	r1, [pc, #28]	; (8002ce8 <MX_USB_DEVICE_Init+0x24>)
 8002ccc:	4620      	mov	r0, r4
 8002cce:	f7ff fac1 	bl	8002254 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID);
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	4905      	ldr	r1, [pc, #20]	; (8002cec <MX_USB_DEVICE_Init+0x28>)
 8002cd6:	f7ff fad2 	bl	800227e <USBD_RegisterClass>

  USBD_Start(&hUsbDeviceFS);
 8002cda:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8002ce0:	f7ff bad4 	b.w	800228c <USBD_Start>
 8002ce4:	200001cc 	.word	0x200001cc
 8002ce8:	200000cc 	.word	0x200000cc
 8002cec:	20000054 	.word	0x20000054

08002cf0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002cf0:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <HAL_PCD_MspInit+0x38>)
 8002cf4:	6802      	ldr	r2, [r0, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d112      	bne.n	8002d20 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002cfa:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8002cfe:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002d00:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8002d02:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002d06:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002d08:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8002d0a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002d0c:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8002d0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d12:	9301      	str	r3, [sp, #4]
 8002d14:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002d16:	f7fd fa85 	bl	8000224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002d1a:	2014      	movs	r0, #20
 8002d1c:	f7fd fab6 	bl	800028c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002d20:	b003      	add	sp, #12
 8002d22:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d26:	bf00      	nop
 8002d28:	40005c00 	.word	0x40005c00

08002d2c <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002d2c:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8002d30:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002d34:	f7ff bac1 	b.w	80022ba <USBD_LL_SetupStage>

08002d38 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002d38:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002d3c:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8002d40:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002d44:	f7ff bae6 	b.w	8002314 <USBD_LL_DataOutStage>

08002d48 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002d48:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002d4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d4e:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002d52:	f7ff bb11 	b.w	8002378 <USBD_LL_DataInStage>

08002d56 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002d56:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002d5a:	f7ff bb8d 	b.w	8002478 <USBD_LL_SOF>

08002d5e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8002d5e:	b510      	push	{r4, lr}
 8002d60:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8002d62:	2101      	movs	r1, #1
 8002d64:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002d68:	f7ff fb74 	bl	8002454 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002d6c:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 8002d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002d74:	f7ff bb4f 	b.w	8002416 <USBD_LL_Reset>

08002d78 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002d78:	b510      	push	{r4, lr}
 8002d7a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002d7c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002d80:	f7ff fb6b 	bl	800245a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002d84:	69a3      	ldr	r3, [r4, #24]
 8002d86:	b123      	cbz	r3, 8002d92 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002d88:	4a02      	ldr	r2, [pc, #8]	; (8002d94 <HAL_PCD_SuspendCallback+0x1c>)
 8002d8a:	6913      	ldr	r3, [r2, #16]
 8002d8c:	f043 0306 	orr.w	r3, r3, #6
 8002d90:	6113      	str	r3, [r2, #16]
 8002d92:	bd10      	pop	{r4, pc}
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002d98:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002d9c:	f7ff bb66 	b.w	800246c <USBD_LL_Resume>

08002da0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8002da0:	b510      	push	{r4, lr}
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8002da2:	2302      	movs	r3, #2
 8002da4:	2208      	movs	r2, #8
 8002da6:	f04f 0e03 	mov.w	lr, #3
{
 8002daa:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8002dac:	4915      	ldr	r1, [pc, #84]	; (8002e04 <USBD_LL_Init+0x64>)
  hpcd_USB_FS.pData = pdev;
 8002dae:	4816      	ldr	r0, [pc, #88]	; (8002e08 <USBD_LL_Init+0x68>)
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8002db0:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002db4:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8002db6:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8002dba:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002dbe:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002dc0:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002dc2:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002dc4:	f7fd fb7f 	bl	80004c6 <HAL_PCD_Init>
 8002dc8:	b120      	cbz	r0, 8002dd4 <USBD_LL_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002dca:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8002dce:	480f      	ldr	r0, [pc, #60]	; (8002e0c <USBD_LL_Init+0x6c>)
 8002dd0:	f7ff fe98 	bl	8002b04 <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2318      	movs	r3, #24
 8002dd8:	4611      	mov	r1, r2
 8002dda:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002dde:	f7fd ff3d 	bl	8000c5c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8002de2:	2358      	movs	r3, #88	; 0x58
 8002de4:	2200      	movs	r2, #0
 8002de6:	2180      	movs	r1, #128	; 0x80
 8002de8:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002dec:	f7fd ff36 	bl	8000c5c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8002df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002df4:	2200      	movs	r2, #0
 8002df6:	2181      	movs	r1, #129	; 0x81
 8002df8:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002dfc:	f7fd ff2e 	bl	8000c5c <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 8002e00:	2000      	movs	r0, #0
 8002e02:	bd10      	pop	{r4, pc}
 8002e04:	40005c00 	.word	0x40005c00
 8002e08:	200003f0 	.word	0x200003f0
 8002e0c:	080032b5 	.word	0x080032b5

08002e10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002e10:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8002e12:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002e16:	f7fd fbbf 	bl	8000598 <HAL_PCD_Start>
 8002e1a:	2803      	cmp	r0, #3
 8002e1c:	bf9a      	itte	ls
 8002e1e:	4b02      	ldrls	r3, [pc, #8]	; (8002e28 <USBD_LL_Start+0x18>)
 8002e20:	5c18      	ldrbls	r0, [r3, r0]
 8002e22:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8002e24:	bd08      	pop	{r3, pc}
 8002e26:	bf00      	nop
 8002e28:	080032b1 	.word	0x080032b1

08002e2c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8002e2c:	b510      	push	{r4, lr}
 8002e2e:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002e30:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002e34:	4613      	mov	r3, r2
 8002e36:	4622      	mov	r2, r4
 8002e38:	f7fd fbd9 	bl	80005ee <HAL_PCD_EP_Open>
 8002e3c:	2803      	cmp	r0, #3
 8002e3e:	bf9a      	itte	ls
 8002e40:	4b01      	ldrls	r3, [pc, #4]	; (8002e48 <USBD_LL_OpenEP+0x1c>)
 8002e42:	5c18      	ldrbls	r0, [r3, r0]
 8002e44:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8002e46:	bd10      	pop	{r4, pc}
 8002e48:	080032b1 	.word	0x080032b1

08002e4c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002e4c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002e4e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002e52:	f7fd fbef 	bl	8000634 <HAL_PCD_EP_Close>
 8002e56:	2803      	cmp	r0, #3
 8002e58:	bf9a      	itte	ls
 8002e5a:	4b02      	ldrls	r3, [pc, #8]	; (8002e64 <USBD_LL_CloseEP+0x18>)
 8002e5c:	5c18      	ldrbls	r0, [r3, r0]
 8002e5e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002e60:	bd08      	pop	{r3, pc}
 8002e62:	bf00      	nop
 8002e64:	080032b1 	.word	0x080032b1

08002e68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002e68:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002e6a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002e6e:	f7fd fea9 	bl	8000bc4 <HAL_PCD_EP_SetStall>
 8002e72:	2803      	cmp	r0, #3
 8002e74:	bf9a      	itte	ls
 8002e76:	4b02      	ldrls	r3, [pc, #8]	; (8002e80 <USBD_LL_StallEP+0x18>)
 8002e78:	5c18      	ldrbls	r0, [r3, r0]
 8002e7a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002e7c:	bd08      	pop	{r3, pc}
 8002e7e:	bf00      	nop
 8002e80:	080032b1 	.word	0x080032b1

08002e84 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002e84:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002e86:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002e8a:	f7fd fec4 	bl	8000c16 <HAL_PCD_EP_ClrStall>
 8002e8e:	2803      	cmp	r0, #3
 8002e90:	bf9a      	itte	ls
 8002e92:	4b02      	ldrls	r3, [pc, #8]	; (8002e9c <USBD_LL_ClearStallEP+0x18>)
 8002e94:	5c18      	ldrbls	r0, [r3, r0]
 8002e96:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002e98:	bd08      	pop	{r3, pc}
 8002e9a:	bf00      	nop
 8002e9c:	080032b1 	.word	0x080032b1

08002ea0 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8002ea0:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002ea2:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002ea6:	bf45      	ittet	mi
 8002ea8:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8002eac:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002eb0:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002eb4:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002eb8:	bf58      	it	pl
 8002eba:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 8002ebe:	4770      	bx	lr

08002ec0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002ec0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002ec2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002ec6:	f7fd fb7e 	bl	80005c6 <HAL_PCD_SetAddress>
 8002eca:	2803      	cmp	r0, #3
 8002ecc:	bf9a      	itte	ls
 8002ece:	4b02      	ldrls	r3, [pc, #8]	; (8002ed8 <USBD_LL_SetUSBAddress+0x18>)
 8002ed0:	5c18      	ldrbls	r0, [r3, r0]
 8002ed2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002ed4:	bd08      	pop	{r3, pc}
 8002ed6:	bf00      	nop
 8002ed8:	080032b1 	.word	0x080032b1

08002edc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002edc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002ede:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002ee2:	f7fd fbe0 	bl	80006a6 <HAL_PCD_EP_Transmit>
 8002ee6:	2803      	cmp	r0, #3
 8002ee8:	bf9a      	itte	ls
 8002eea:	4b02      	ldrls	r3, [pc, #8]	; (8002ef4 <USBD_LL_Transmit+0x18>)
 8002eec:	5c18      	ldrbls	r0, [r3, r0]
 8002eee:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8002ef0:	bd08      	pop	{r3, pc}
 8002ef2:	bf00      	nop
 8002ef4:	080032b1 	.word	0x080032b1

08002ef8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002ef8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002efa:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002efe:	f7fd fbba 	bl	8000676 <HAL_PCD_EP_Receive>
 8002f02:	2803      	cmp	r0, #3
 8002f04:	bf9a      	itte	ls
 8002f06:	4b02      	ldrls	r3, [pc, #8]	; (8002f10 <USBD_LL_PrepareReceive+0x18>)
 8002f08:	5c18      	ldrbls	r0, [r3, r0]
 8002f0a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002f0c:	bd08      	pop	{r3, pc}
 8002f0e:	bf00      	nop
 8002f10:	080032b1 	.word	0x080032b1

08002f14 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8002f14:	4800      	ldr	r0, [pc, #0]	; (8002f18 <USBD_static_malloc+0x4>)
 8002f16:	4770      	bx	lr
 8002f18:	20000130 	.word	0x20000130

08002f1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8002f1c:	4770      	bx	lr

08002f1e <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8002f1e:	4770      	bx	lr

08002f20 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8002f20:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8002f22:	4801      	ldr	r0, [pc, #4]	; (8002f28 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8002f24:	800b      	strh	r3, [r1, #0]
}
 8002f26:	4770      	bx	lr
 8002f28:	200000e8 	.word	0x200000e8

08002f2c <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8002f2c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8002f2e:	4801      	ldr	r0, [pc, #4]	; (8002f34 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8002f30:	800b      	strh	r3, [r1, #0]
}
 8002f32:	4770      	bx	lr
 8002f34:	200000fc 	.word	0x200000fc

08002f38 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002f38:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002f3a:	4c04      	ldr	r4, [pc, #16]	; (8002f4c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8002f3c:	460a      	mov	r2, r1
 8002f3e:	4804      	ldr	r0, [pc, #16]	; (8002f50 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8002f40:	4621      	mov	r1, r4
 8002f42:	f7ff fc45 	bl	80027d0 <USBD_GetString>
  return USBD_StrDesc;
}
 8002f46:	4620      	mov	r0, r4
 8002f48:	bd10      	pop	{r4, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000850 	.word	0x20000850
 8002f50:	080032e1 	.word	0x080032e1

08002f54 <USBD_FS_ProductStrDescriptor>:
{
 8002f54:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002f56:	4c04      	ldr	r4, [pc, #16]	; (8002f68 <USBD_FS_ProductStrDescriptor+0x14>)
 8002f58:	460a      	mov	r2, r1
 8002f5a:	4804      	ldr	r0, [pc, #16]	; (8002f6c <USBD_FS_ProductStrDescriptor+0x18>)
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	f7ff fc37 	bl	80027d0 <USBD_GetString>
}
 8002f62:	4620      	mov	r0, r4
 8002f64:	bd10      	pop	{r4, pc}
 8002f66:	bf00      	nop
 8002f68:	20000850 	.word	0x20000850
 8002f6c:	080032f4 	.word	0x080032f4

08002f70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002f70:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8002f72:	4c04      	ldr	r4, [pc, #16]	; (8002f84 <USBD_FS_SerialStrDescriptor+0x14>)
 8002f74:	460a      	mov	r2, r1
 8002f76:	4804      	ldr	r0, [pc, #16]	; (8002f88 <USBD_FS_SerialStrDescriptor+0x18>)
 8002f78:	4621      	mov	r1, r4
 8002f7a:	f7ff fc29 	bl	80027d0 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002f7e:	4620      	mov	r0, r4
 8002f80:	bd10      	pop	{r4, pc}
 8002f82:	bf00      	nop
 8002f84:	20000850 	.word	0x20000850
 8002f88:	0800330a 	.word	0x0800330a

08002f8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002f8c:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8002f8e:	4c04      	ldr	r4, [pc, #16]	; (8002fa0 <USBD_FS_ConfigStrDescriptor+0x14>)
 8002f90:	460a      	mov	r2, r1
 8002f92:	4804      	ldr	r0, [pc, #16]	; (8002fa4 <USBD_FS_ConfigStrDescriptor+0x18>)
 8002f94:	4621      	mov	r1, r4
 8002f96:	f7ff fc1b 	bl	80027d0 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	bd10      	pop	{r4, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000850 	.word	0x20000850
 8002fa4:	080032c8 	.word	0x080032c8

08002fa8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002fa8:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002faa:	4c04      	ldr	r4, [pc, #16]	; (8002fbc <USBD_FS_InterfaceStrDescriptor+0x14>)
 8002fac:	460a      	mov	r2, r1
 8002fae:	4804      	ldr	r0, [pc, #16]	; (8002fc0 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	f7ff fc0d 	bl	80027d0 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	bd10      	pop	{r4, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000850 	.word	0x20000850
 8002fc0:	080032d3 	.word	0x080032d3

08002fc4 <xputc>:
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 8002fc4:	280a      	cmp	r0, #10
{
 8002fc6:	b510      	push	{r4, lr}
 8002fc8:	4604      	mov	r4, r0
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 8002fca:	d102      	bne.n	8002fd2 <xputc+0xe>
 8002fcc:	200d      	movs	r0, #13
 8002fce:	f7ff fff9 	bl	8002fc4 <xputc>

	if (outptr) {
 8002fd2:	4a07      	ldr	r2, [pc, #28]	; (8002ff0 <xputc+0x2c>)
 8002fd4:	6813      	ldr	r3, [r2, #0]
 8002fd6:	b11b      	cbz	r3, 8002fe0 <xputc+0x1c>
		*outptr++ = (unsigned char)c;
 8002fd8:	1c59      	adds	r1, r3, #1
 8002fda:	701c      	strb	r4, [r3, #0]
 8002fdc:	6011      	str	r1, [r2, #0]
		return;
 8002fde:	bd10      	pop	{r4, pc}
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
 8002fe0:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <xputc+0x30>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	b11b      	cbz	r3, 8002fee <xputc+0x2a>
 8002fe6:	4620      	mov	r0, r4
}
 8002fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (xfunc_out) xfunc_out((unsigned char)c);
 8002fec:	4718      	bx	r3
 8002fee:	bd10      	pop	{r4, pc}
 8002ff0:	20000144 	.word	0x20000144
 8002ff4:	20000a54 	.word	0x20000a54

08002ff8 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 8002ff8:	b510      	push	{r4, lr}
 8002ffa:	1e44      	subs	r4, r0, #1
	while (*str)
 8002ffc:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8003000:	b900      	cbnz	r0, 8003004 <xputs+0xc>
		xputc(*str++);
}
 8003002:	bd10      	pop	{r4, pc}
		xputc(*str++);
 8003004:	f7ff ffde 	bl	8002fc4 <xputc>
 8003008:	e7f8      	b.n	8002ffc <xputs+0x4>

0800300a <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 800300a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800300e:	4602      	mov	r2, r0
 8003010:	460d      	mov	r5, r1
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 8003012:	7810      	ldrb	r0, [r2, #0]
		if (!c) break;				/* End of format? */
 8003014:	2800      	cmp	r0, #0
 8003016:	f000 80ca 	beq.w	80031ae <xvprintf+0x1a4>
		if (c != '%') {				/* Pass through it if not a % sequense */
 800301a:	2825      	cmp	r0, #37	; 0x25
 800301c:	d004      	beq.n	8003028 <xvprintf+0x1e>
		c = *fmt++;					/* Get a char */
 800301e:	1c57      	adds	r7, r2, #1
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 8003020:	f7ff ffd0 	bl	8002fc4 <xputc>
 8003024:	462c      	mov	r4, r5
 8003026:	e052      	b.n	80030ce <xvprintf+0xc4>
		c = *fmt++;					/* Get first char of the sequense */
 8003028:	7853      	ldrb	r3, [r2, #1]
		if (c == '0') {				/* Flag: '0' padded */
 800302a:	2b30      	cmp	r3, #48	; 0x30
 800302c:	d128      	bne.n	8003080 <xvprintf+0x76>
			f = 1; c = *fmt++;
 800302e:	2601      	movs	r6, #1
 8003030:	7893      	ldrb	r3, [r2, #2]
 8003032:	1cd7      	adds	r7, r2, #3
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8003034:	f04f 0800 	mov.w	r8, #0
			w = w * 10 + c - '0';
 8003038:	210a      	movs	r1, #10
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 800303a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800303e:	2a09      	cmp	r2, #9
 8003040:	d927      	bls.n	8003092 <xvprintf+0x88>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8003042:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 8003046:	2a4c      	cmp	r2, #76	; 0x4c
			f |= 4; c = *fmt++;
 8003048:	bf02      	ittt	eq
 800304a:	783b      	ldrbeq	r3, [r7, #0]
 800304c:	f046 0604 	orreq.w	r6, r6, #4
 8003050:	3701      	addeq	r7, #1
		if (!c) break;				/* End of format? */
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 80ab 	beq.w	80031ae <xvprintf+0x1a4>
		if (d >= 'a') d -= 0x20;
 8003058:	2b60      	cmp	r3, #96	; 0x60
 800305a:	bf92      	itee	ls
 800305c:	461a      	movls	r2, r3
 800305e:	f1a3 0220 	subhi.w	r2, r3, #32
 8003062:	b2d2      	uxtbhi	r2, r2
		switch (d) {				/* Type is... */
 8003064:	2a4f      	cmp	r2, #79	; 0x4f
 8003066:	d035      	beq.n	80030d4 <xvprintf+0xca>
 8003068:	d81a      	bhi.n	80030a0 <xvprintf+0x96>
 800306a:	2a43      	cmp	r2, #67	; 0x43
 800306c:	f000 8088 	beq.w	8003180 <xvprintf+0x176>
 8003070:	2a44      	cmp	r2, #68	; 0x44
 8003072:	f000 808e 	beq.w	8003192 <xvprintf+0x188>
 8003076:	2a42      	cmp	r2, #66	; 0x42
 8003078:	f000 8089 	beq.w	800318e <xvprintf+0x184>
			xputc(c); continue;
 800307c:	4618      	mov	r0, r3
 800307e:	e7cf      	b.n	8003020 <xvprintf+0x16>
			if (c == '-') {			/* Flag: left justified */
 8003080:	2b2d      	cmp	r3, #45	; 0x2d
		c = *fmt++;					/* Get first char of the sequense */
 8003082:	bf19      	ittee	ne
 8003084:	1c97      	addne	r7, r2, #2
		f = 0;
 8003086:	2600      	movne	r6, #0
				f = 2; c = *fmt++;
 8003088:	1cd7      	addeq	r7, r2, #3
 800308a:	7893      	ldrbeq	r3, [r2, #2]
 800308c:	bf08      	it	eq
 800308e:	2602      	moveq	r6, #2
 8003090:	e7d0      	b.n	8003034 <xvprintf+0x2a>
			w = w * 10 + c - '0';
 8003092:	fb01 3808 	mla	r8, r1, r8, r3
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8003096:	f817 3b01 	ldrb.w	r3, [r7], #1
			w = w * 10 + c - '0';
 800309a:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800309e:	e7cc      	b.n	800303a <xvprintf+0x30>
		switch (d) {				/* Type is... */
 80030a0:	2a55      	cmp	r2, #85	; 0x55
 80030a2:	d076      	beq.n	8003192 <xvprintf+0x188>
 80030a4:	2a58      	cmp	r2, #88	; 0x58
 80030a6:	d070      	beq.n	800318a <xvprintf+0x180>
 80030a8:	2a53      	cmp	r2, #83	; 0x53
 80030aa:	d1e7      	bne.n	800307c <xvprintf+0x72>
			p = va_arg(arp, char*);
 80030ac:	f8d5 9000 	ldr.w	r9, [r5]
 80030b0:	1d2c      	adds	r4, r5, #4
			for (j = 0; p[j]; j++) ;
 80030b2:	464b      	mov	r3, r9
 80030b4:	eba3 0509 	sub.w	r5, r3, r9
 80030b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030bc:	2a00      	cmp	r2, #0
 80030be:	d1f9      	bne.n	80030b4 <xvprintf+0xaa>
			while (!(f & 2) && j++ < w) xputc(' ');
 80030c0:	07b0      	lsls	r0, r6, #30
 80030c2:	d552      	bpl.n	800316a <xvprintf+0x160>
			xputs(p);
 80030c4:	4648      	mov	r0, r9
 80030c6:	f7ff ff97 	bl	8002ff8 <xputs>
			while (j++ < w) xputc(' ');
 80030ca:	45a8      	cmp	r8, r5
 80030cc:	d853      	bhi.n	8003176 <xvprintf+0x16c>
			xputc(c); continue;
 80030ce:	4625      	mov	r5, r4
 80030d0:	463a      	mov	r2, r7
 80030d2:	e79e      	b.n	8003012 <xvprintf+0x8>
			r = 8; break;
 80030d4:	2008      	movs	r0, #8
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 80030d6:	2a44      	cmp	r2, #68	; 0x44
 80030d8:	6829      	ldr	r1, [r5, #0]
 80030da:	f105 0404 	add.w	r4, r5, #4
 80030de:	d104      	bne.n	80030ea <xvprintf+0xe0>
		if (d == 'D' && (v & 0x80000000)) {
 80030e0:	2900      	cmp	r1, #0
			v = 0 - v;
 80030e2:	bfbc      	itt	lt
 80030e4:	4249      	neglt	r1, r1
			f |= 8;
 80030e6:	f046 0608 	orrlt.w	r6, r6, #8
 80030ea:	2b78      	cmp	r3, #120	; 0x78
 80030ec:	bf0c      	ite	eq
 80030ee:	f04f 0c27 	moveq.w	ip, #39	; 0x27
 80030f2:	f04f 0c07 	movne.w	ip, #7
		}
		i = 0;
 80030f6:	2200      	movs	r2, #0
		do {
			d = (char)(v % r); v /= r;
 80030f8:	fbb1 fef0 	udiv	lr, r1, r0
 80030fc:	fb00 151e 	mls	r5, r0, lr, r1
 8003100:	b2eb      	uxtb	r3, r5
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8003102:	2d09      	cmp	r5, #9
 8003104:	bf84      	itt	hi
 8003106:	4463      	addhi	r3, ip
 8003108:	b2db      	uxtbhi	r3, r3
			s[i++] = d + '0';
 800310a:	3330      	adds	r3, #48	; 0x30
			d = (char)(v % r); v /= r;
 800310c:	4671      	mov	r1, lr
			s[i++] = d + '0';
 800310e:	1c55      	adds	r5, r2, #1
 8003110:	f80d 3002 	strb.w	r3, [sp, r2]
		} while (v && i < sizeof(s));
 8003114:	f1be 0f00 	cmp.w	lr, #0
 8003118:	d002      	beq.n	8003120 <xvprintf+0x116>
 800311a:	2d10      	cmp	r5, #16
 800311c:	d13b      	bne.n	8003196 <xvprintf+0x18c>
 800311e:	220f      	movs	r2, #15
		if (f & 8) s[i++] = '-';
 8003120:	0731      	lsls	r1, r6, #28
 8003122:	d505      	bpl.n	8003130 <xvprintf+0x126>
 8003124:	ab04      	add	r3, sp, #16
 8003126:	441d      	add	r5, r3
 8003128:	232d      	movs	r3, #45	; 0x2d
 800312a:	f805 3c10 	strb.w	r3, [r5, #-16]
 800312e:	1c95      	adds	r5, r2, #2
		j = i; d = (f & 1) ? '0' : ' ';
 8003130:	f016 0f01 	tst.w	r6, #1
 8003134:	bf14      	ite	ne
 8003136:	f04f 0a30 	movne.w	sl, #48	; 0x30
 800313a:	f04f 0a20 	moveq.w	sl, #32
		while (!(f & 2) && j++ < w) xputc(d);
 800313e:	07b3      	lsls	r3, r6, #30
		j = i; d = (f & 1) ? '0' : ' ';
 8003140:	46a9      	mov	r9, r5
		while (!(f & 2) && j++ < w) xputc(d);
 8003142:	d52e      	bpl.n	80031a2 <xvprintf+0x198>
		do xputc(s[--i]); while(i);
 8003144:	3d01      	subs	r5, #1
 8003146:	f81d 0005 	ldrb.w	r0, [sp, r5]
 800314a:	f7ff ff3b 	bl	8002fc4 <xputc>
 800314e:	2d00      	cmp	r5, #0
 8003150:	d1f8      	bne.n	8003144 <xvprintf+0x13a>
		while (j++ < w) xputc(' ');
 8003152:	45c8      	cmp	r8, r9
 8003154:	d9bb      	bls.n	80030ce <xvprintf+0xc4>
 8003156:	2020      	movs	r0, #32
 8003158:	f7ff ff34 	bl	8002fc4 <xputc>
 800315c:	f109 0901 	add.w	r9, r9, #1
 8003160:	e7f7      	b.n	8003152 <xvprintf+0x148>
			while (!(f & 2) && j++ < w) xputc(' ');
 8003162:	2020      	movs	r0, #32
 8003164:	f7ff ff2e 	bl	8002fc4 <xputc>
 8003168:	4635      	mov	r5, r6
 800316a:	4545      	cmp	r5, r8
 800316c:	f105 0601 	add.w	r6, r5, #1
 8003170:	d3f7      	bcc.n	8003162 <xvprintf+0x158>
 8003172:	4635      	mov	r5, r6
 8003174:	e7a6      	b.n	80030c4 <xvprintf+0xba>
			while (j++ < w) xputc(' ');
 8003176:	2020      	movs	r0, #32
 8003178:	f7ff ff24 	bl	8002fc4 <xputc>
 800317c:	3501      	adds	r5, #1
 800317e:	e7a4      	b.n	80030ca <xvprintf+0xc0>
			xputc((char)va_arg(arp, int)); continue;
 8003180:	7828      	ldrb	r0, [r5, #0]
 8003182:	1d2c      	adds	r4, r5, #4
 8003184:	f7ff ff1e 	bl	8002fc4 <xputc>
 8003188:	e7a1      	b.n	80030ce <xvprintf+0xc4>
			r = 16; break;
 800318a:	2010      	movs	r0, #16
 800318c:	e7a3      	b.n	80030d6 <xvprintf+0xcc>
			r = 2; break;
 800318e:	2002      	movs	r0, #2
 8003190:	e7a1      	b.n	80030d6 <xvprintf+0xcc>
			r = 10; break;
 8003192:	200a      	movs	r0, #10
 8003194:	e79f      	b.n	80030d6 <xvprintf+0xcc>
 8003196:	462a      	mov	r2, r5
 8003198:	e7ae      	b.n	80030f8 <xvprintf+0xee>
		while (!(f & 2) && j++ < w) xputc(d);
 800319a:	4650      	mov	r0, sl
 800319c:	f7ff ff12 	bl	8002fc4 <xputc>
 80031a0:	46b1      	mov	r9, r6
 80031a2:	45c1      	cmp	r9, r8
 80031a4:	f109 0601 	add.w	r6, r9, #1
 80031a8:	d3f7      	bcc.n	800319a <xvprintf+0x190>
 80031aa:	46b1      	mov	r9, r6
 80031ac:	e7ca      	b.n	8003144 <xvprintf+0x13a>
	}
}
 80031ae:	b004      	add	sp, #16
 80031b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080031b4 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 80031b4:	b40f      	push	{r0, r1, r2, r3}
 80031b6:	b507      	push	{r0, r1, r2, lr}
 80031b8:	a904      	add	r1, sp, #16
 80031ba:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list arp;


	va_start(arp, fmt);
 80031be:	9101      	str	r1, [sp, #4]
	xvprintf(fmt, arp);
 80031c0:	f7ff ff23 	bl	800300a <xvprintf>
	va_end(arp);
}
 80031c4:	b003      	add	sp, #12
 80031c6:	f85d eb04 	ldr.w	lr, [sp], #4
 80031ca:	b004      	add	sp, #16
 80031cc:	4770      	bx	lr
	...

080031d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80031d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80031d2:	e003      	b.n	80031dc <LoopCopyDataInit>

080031d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80031d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80031d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80031da:	3104      	adds	r1, #4

080031dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80031dc:	480a      	ldr	r0, [pc, #40]	; (8003208 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80031de:	4b0b      	ldr	r3, [pc, #44]	; (800320c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80031e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80031e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80031e4:	d3f6      	bcc.n	80031d4 <CopyDataInit>
  ldr r2, =_sbss
 80031e6:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80031e8:	e002      	b.n	80031f0 <LoopFillZerobss>

080031ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80031ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80031ec:	f842 3b04 	str.w	r3, [r2], #4

080031f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80031f0:	4b08      	ldr	r3, [pc, #32]	; (8003214 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80031f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80031f4:	d3f9      	bcc.n	80031ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031f6:	f7ff fd3f 	bl	8002c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031fa:	f000 f80f 	bl	800321c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031fe:	f7ff fbcf 	bl	80029a0 <main>
  bx lr
 8003202:	4770      	bx	lr
  ldr r3, =_sidata
 8003204:	08003320 	.word	0x08003320
  ldr r0, =_sdata
 8003208:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800320c:	20000100 	.word	0x20000100
  ldr r2, =_sbss
 8003210:	20000100 	.word	0x20000100
  ldr r3, = _ebss
 8003214:	20000a58 	.word	0x20000a58

08003218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003218:	e7fe      	b.n	8003218 <ADC1_2_IRQHandler>
	...

0800321c <__libc_init_array>:
 800321c:	b570      	push	{r4, r5, r6, lr}
 800321e:	2500      	movs	r5, #0
 8003220:	4e0c      	ldr	r6, [pc, #48]	; (8003254 <__libc_init_array+0x38>)
 8003222:	4c0d      	ldr	r4, [pc, #52]	; (8003258 <__libc_init_array+0x3c>)
 8003224:	1ba4      	subs	r4, r4, r6
 8003226:	10a4      	asrs	r4, r4, #2
 8003228:	42a5      	cmp	r5, r4
 800322a:	d109      	bne.n	8003240 <__libc_init_array+0x24>
 800322c:	f000 f81a 	bl	8003264 <_init>
 8003230:	2500      	movs	r5, #0
 8003232:	4e0a      	ldr	r6, [pc, #40]	; (800325c <__libc_init_array+0x40>)
 8003234:	4c0a      	ldr	r4, [pc, #40]	; (8003260 <__libc_init_array+0x44>)
 8003236:	1ba4      	subs	r4, r4, r6
 8003238:	10a4      	asrs	r4, r4, #2
 800323a:	42a5      	cmp	r5, r4
 800323c:	d105      	bne.n	800324a <__libc_init_array+0x2e>
 800323e:	bd70      	pop	{r4, r5, r6, pc}
 8003240:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003244:	4798      	blx	r3
 8003246:	3501      	adds	r5, #1
 8003248:	e7ee      	b.n	8003228 <__libc_init_array+0xc>
 800324a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800324e:	4798      	blx	r3
 8003250:	3501      	adds	r5, #1
 8003252:	e7f2      	b.n	800323a <__libc_init_array+0x1e>
 8003254:	08003318 	.word	0x08003318
 8003258:	08003318 	.word	0x08003318
 800325c:	08003318 	.word	0x08003318
 8003260:	0800331c 	.word	0x0800331c

08003264 <_init>:
 8003264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003266:	bf00      	nop
 8003268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326a:	bc08      	pop	{r3}
 800326c:	469e      	mov	lr, r3
 800326e:	4770      	bx	lr

08003270 <_fini>:
 8003270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003272:	bf00      	nop
 8003274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003276:	bc08      	pop	{r3}
 8003278:	469e      	mov	lr, r3
 800327a:	4770      	bx	lr
